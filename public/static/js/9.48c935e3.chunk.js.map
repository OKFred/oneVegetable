{"version":3,"sources":["views/product/Languages.js","views/product/component/ProductFolder.js","../node_modules/@mui/icons-material/esm/Speed.js","../node_modules/@mui/icons-material/esm/ArrowUpward.js","../node_modules/@mui/icons-material/esm/ArrowDownward.js","views/product/component/ProductTable.js","views/product/index.js"],"names":["Languages","enUS","folder","currentFolder","needFolderName","addNewFolder","folderNull","dataNull","table","tableHeader","categoryName","productId","subject","status","display","attributes","keywords","price","payment_methods","min_order_quantity","unit_type","gmt_create","gmt_modified","score","tag","tableToolbar","menuHide","menuShow","productScore","productDisplayOn","productDisplayOff","productUpdate","productEdit","form","KeyInformation","ProductAttributes","category","attributeMissing","attributeDuplicated","pieces","steps","first","second","finally","previous","next","complete","editPrice","choosePhotos","uploadPhotos","removePhotos","photoUploadTip","productDescriptionTip","mainPhotoRequired","descriptionOverflow","addAttributes","removeAttributes","modificationNull","modificationDone","uploadSuccess","productScoreError","common","yes","no","netFail","zhCN","ProductFolder","folderArr","addFolder","setCurrentFolder","langPack","useState","newFolder","setNewFolder","folderCommand","setFolderCommand","a","queryResult","group_name","refreshFolders","length","style","marginBottom","Input","sx","height","marginRight","variant","color","type","placeholder","onChange","e","target","value","trim","Button","startIcon","Check","onClick","Cancel","Breadcrumbs","Folder","Select","minWidth","autoWidth","MenuItem","disabled","map","obj","index","group_id","ButtonGroup","Add","Typography","createSvgIcon","_jsx","d","selectedArr","updatedArr","ProductTable","tableRows","tableColumns","page_size","page","total","localization","updateProduct","checkProductScore","changeProductDisplay","handleChangePage","handleChangeRowsPerPage","onRowClick","navigate","useNavigate","checkboxSelection","tableHeight","window","innerHeight","width","DataGrid","experimentalFeatures","newEditingApi","localeText","locale","components","MuiDataGrid","defaultProps","Toolbar","GridToolbarContainer","GridToolbarColumnsButton","GridToolbarFilterButton","GridToolbarDensitySelector","GridToolbarExport","csvOptions","utf8WithBom","fileName","Date","valueOf","getTimezoneOffset","toISOString","replace","padding","Speed","hidden","ArrowUpward","list","product_id","join","new_display","product_id_list","ArrowDownward","onCellEditCommit","params","id","row","field","oldIndex","findIndex","newData","undefined","onStateChange","selection","find","console","log","pageSize","rowCount","columns","getRowHeight","rows","rowsPerPageOptions","disableSelectionOnClick","paginationMode","onPageChange","onPageSizeChange","App","dispatch","useDispatch","useSelector","state","setLangPack","globalization","baseData","loginData","appData","setAppData","parentFolderArr","setFolderArr","setPage","setPage_size","setTotal","setTableColumns","setTableRows","paramObj","ma","productGroupAddQuery","fetchAPI","msg","response","result","res","productGroupAddCheck","getFolders","max","productGroupQuery","productGroupCheck","childIdArr","forEach","push","getProductList","group_id1","productListQuery","productListCheck","tableFormatter","products","arr","alibaba_product_brief_response","rowData","string","toString","images","main_image","total_item","productDisplayQuery","productDisplayCheck","setTimeout","scoreArr","productScoreQuery","productScoreCheck","prev","newArr","i","productArr","category_id","product_type","newObj","updateProductInfo","current_page","productFieldUpdateQuery","productFieldUpdateCheck","headerName","valueGetter","valueFormatter","pc_detail_url","renderCell","href","srcset","split","alt","editable","flex","preProcessEditCellProps","props","error","splice","sortable","useEffect","SET_APPDATA","appProduct","cache","MainCard","title","newPage","newSize"],"mappings":"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","file":"static/js/9.48c935e3.chunk.js","sourcesContent":["let Languages = {\r\n    enUS: {\r\n        folder: {\r\n            currentFolder: 'please select',\r\n            needFolderName: 'please input name for new folder',\r\n            addNewFolder: 'add new folder',\r\n            folderNull: 'folder not found',\r\n            dataNull: 'data not found'\r\n        },\r\n        table: {\r\n            tableHeader: 'Products',\r\n            categoryName: 'category name',\r\n            productId: 'product id',\r\n            subject: 'subject',\r\n            status: 'status',\r\n            display: 'display',\r\n            attributes: 'attributes',\r\n            keywords: 'keywords',\r\n            price: 'price (range)',\r\n            payment_methods: 'payment methods',\r\n            min_order_quantity: 'min order quantity(MOQ)',\r\n            unit_type: 'unit type',\r\n            gmt_create: 'date create',\r\n            gmt_modified: 'date modified',\r\n            score: 'score',\r\n            tag: 'tag'\r\n        },\r\n        tableToolbar: {\r\n            menuHide: 'hide menu',\r\n            menuShow: 'show menu',\r\n            productScore: 'scores',\r\n            productDisplayOn: 'in-stock',\r\n            productDisplayOff: 'out-stock',\r\n            productUpdate: 'update',\r\n            productEdit: 'edit'\r\n        },\r\n        form: {\r\n            KeyInformation: 'key information',\r\n            ProductAttributes: 'product attributes',\r\n            subject: '128 letters max.',\r\n            category: 'click to change category',\r\n            keywords: '3 keywords max. Comma(,) separated',\r\n            price: 'set price (range)',\r\n            payment_methods: 'payment methods such as T/T, L/C, etc.',\r\n            min_order_quantity: 'optional',\r\n            attributes: 'add or delete',\r\n            attributeMissing: 'attribute missing',\r\n            attributeDuplicated: 'attribute duplicated',\r\n            pieces: 'pieces'\r\n        },\r\n        steps: {\r\n            first: 'Edit Attributes',\r\n            second: 'Edit Contents',\r\n            finally: 'Preview & Publish',\r\n            previous: 'Previous',\r\n            next: 'Next',\r\n            complete: 'Complete',\r\n            editPrice: 'Edit Price',\r\n            choosePhotos: 'Choose Photos',\r\n            uploadPhotos: 'Upload Photos',\r\n            removePhotos: 'double click to remove the photo',\r\n            photoUploadTip: 'If it cannot be updated, please remove ALL photos and try again',\r\n            productDescriptionTip:\r\n                'Tips: ① If it cannot be updated, please remove ALL contents and try again. ②Click the red button below 👇 to unlock photo resizing',\r\n            mainPhotoRequired: 'Need at least one photo',\r\n            descriptionOverflow: 'description length shall be smaller than 60k letters',\r\n            addAttributes: 'Add Attributes',\r\n            removeAttributes: 'Remove Attributes',\r\n            modificationNull: 'No modification made',\r\n            modificationDone: 'Will submit the following modifications:',\r\n            uploadSuccess: 'Upload Success',\r\n            productScoreError: 'no score found'\r\n        },\r\n        common: {\r\n            yes: 'OK',\r\n            no: 'Cancel',\r\n            netFail: 'request failed'\r\n        }\r\n    },\r\n    zhCN: {\r\n        folder: {\r\n            currentFolder: '请选择',\r\n            needFolderName: '请填写文件夹名',\r\n            addNewFolder: '新建文件夹',\r\n            folderNull: '文件夹不存在',\r\n            dataNull: '数据不存在'\r\n        },\r\n        table: {\r\n            tableHeader: '产品',\r\n            categoryName: '类目',\r\n            productId: '产品 id',\r\n            subject: '标题',\r\n            status: '审核状态',\r\n            display: '上架状态',\r\n            attributes: '属性',\r\n            keywords: '关键词',\r\n            price: '价格(区间)',\r\n            payment_methods: '支付方式',\r\n            min_order_quantity: '最小起订量(MOQ)',\r\n            unit_type: '单位',\r\n            gmt_create: '创建日期',\r\n            gmt_modified: '修改日期',\r\n            score: '产品分',\r\n            tag: '标签'\r\n        },\r\n        tableToolbar: {\r\n            menuHide: '隐藏菜单',\r\n            menuShow: '显示菜单',\r\n            productScore: '产品分',\r\n            productDisplayOn: '上架',\r\n            productDisplayOff: '下架',\r\n            productUpdate: '更新',\r\n            productEdit: '编辑'\r\n        },\r\n        form: {\r\n            KeyInformation: '基本信息',\r\n            ProductAttributes: '产品属性',\r\n            subject: '128 字符以内',\r\n            category: '点击更换类目',\r\n            keywords: '最多三个关键词，用英文逗号(,)分隔',\r\n            price: '设置价格(区间)',\r\n            payment_methods: '支付方式，例如：T/T，L/C，等',\r\n            min_order_quantity: '选填',\r\n            attributes: '可增可减',\r\n            attributeMissing: '属性缺失',\r\n            attributeDuplicated: '属性重复',\r\n            pieces: '件'\r\n        },\r\n        steps: {\r\n            first: '属性编辑',\r\n            second: '详情编辑',\r\n            finally: '预览&发布',\r\n            previous: '上一步',\r\n            next: '下一步',\r\n            complete: '完成',\r\n            editPrice: '编辑价格',\r\n            choosePhotos: '选择图片',\r\n            uploadPhotos: '上传图片',\r\n            removePhotos: '双击移除图片',\r\n            photoUploadTip: '若无法更新，请清除所有图片后重试',\r\n            productDescriptionTip: '提示: ①若无法更新，请清除所有详情后重试 ②原先是智能编辑的情况下，须点击下方红色按钮解锁图片缩放👇',\r\n            mainPhotoRequired: '需要保留至少一张主图',\r\n            descriptionOverflow: '描述长度不能超过6万字符',\r\n            addAttributes: '添加属性',\r\n            removeAttributes: '移除空白属性',\r\n            modificationNull: '没有任何修改',\r\n            modificationDone: '将提交如下内容:',\r\n            uploadSuccess: '上传成功',\r\n            productScoreError: '产品分未查到'\r\n        },\r\n        common: {\r\n            yes: '确定',\r\n            no: '取消',\r\n            netFail: '请求失败'\r\n        }\r\n    }\r\n};\r\n\r\nexport { Languages };\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Button, ButtonGroup, Input, Select, MenuItem, Breadcrumbs } from '@mui/material';\r\nimport {\r\n    Folder as FolderIcon,\r\n    Check as CheckIcon,\r\n    Cancel as CancelIcon,\r\n    Add as AddIcon,\r\n    ModeEdit as EditIcon,\r\n    DeleteOutline as DeleteIcon,\r\n    FileUpload as UploadIcon\r\n} from '@mui/icons-material';\r\n\r\nfunction ProductFolder({ folderArr, currentFolder, addFolder, setCurrentFolder, langPack }) {\r\n    let [newFolder, setNewFolder] = useState(false);\r\n    let [folderCommand, setFolderCommand] = useState(false);\r\n    async function onFolderAdd() {\r\n        if (!newFolder) return queryResult(false, langPack.folder.needFolderName);\r\n        let result = await addFolder({ group_name: newFolder });\r\n        if (result) {\r\n            setCurrentFolder('');\r\n            refreshFolders();\r\n        }\r\n        return;\r\n    }\r\n    function refreshFolders() {\r\n        setNewFolder('');\r\n        setFolderCommand(false);\r\n        return;\r\n    }\r\n\r\n    return !folderArr || !folderArr.length ? (\r\n        <Typography variant=\"body2\">{langPack.folder.folderNull}</Typography>\r\n    ) : (\r\n        <div style={{ marginBottom: '20px' }}>\r\n            {!folderCommand ? (\r\n                <>\r\n                    <Breadcrumbs aria-label=\"breadcrumb\" sx={{ display: 'inline-block', marginRight: '5px' }}>\r\n                        <FolderIcon />\r\n                        <Select\r\n                            sx={{ height: '30px', minWidth: '100px' }}\r\n                            autoWidth={true}\r\n                            value={currentFolder}\r\n                            onChange={(e) => setCurrentFolder(e.target.value)}\r\n                        >\r\n                            <MenuItem value={langPack.folder.currentFolder} disabled>\r\n                                {langPack.folder.currentFolder}\r\n                            </MenuItem>\r\n                            {folderArr.map((obj, index) => (\r\n                                <MenuItem key={index} value={obj.group_id}>\r\n                                    {obj.group_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </Breadcrumbs>\r\n                    <ButtonGroup variant=\"\">\r\n                        <Button onClick={() => setFolderCommand('add')}>\r\n                            <AddIcon />\r\n                        </Button>\r\n                        <Button onClick={() => setFolderCommand('edit')} disabled>\r\n                            <EditIcon />\r\n                        </Button>\r\n                        <Button onClick={() => setFolderCommand('delete')} disabled>\r\n                            <DeleteIcon />\r\n                        </Button>\r\n                        <Button onClick={() => setFolderCommand('upload')} disabled>\r\n                            <UploadIcon />\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {folderCommand === 'add' ? (\r\n                        <>\r\n                            <Input\r\n                                sx={{ height: '30px', marginRight: '10px' }}\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                type=\"text\"\r\n                                placeholder={langPack.folder.addNewFolder}\r\n                                onChange={(e) => setNewFolder(e.target.value.trim())}\r\n                            />\r\n                            <Button startIcon={<CheckIcon />} onClick={onFolderAdd}>\r\n                                {langPack.common.yes}\r\n                            </Button>\r\n                            <Button startIcon={<CancelIcon />} onClick={() => setFolderCommand(false)}>\r\n                                {langPack.common.no}\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nProductFolder.propTypes = {\r\n    localization: PropTypes.object,\r\n    finalDescription: PropTypes.string,\r\n    setFinalDescription: PropTypes.func,\r\n    folderArr: PropTypes.array,\r\n    currentFolder: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    addFolder: PropTypes.func,\r\n    setCurrentFolder: PropTypes.func,\r\n    langPack: PropTypes.object\r\n};\r\n\r\nexport default ProductFolder;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m20.38 8.57-1.23 1.85a8 8 0 0 1-.22 7.58H5.07A8 8 0 0 1 15.58 6.85l1.85-1.23A10 10 0 0 0 3.35 19a2 2 0 0 0 1.72 1h13.85a2 2 0 0 0 1.74-1 10 10 0 0 0-.27-10.44zm-9.79 6.84a2 2 0 0 0 2.83 0l5.66-8.49-8.49 5.66a2 2 0 0 0 0 2.83z\"\n}), 'Speed');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m4 12 1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"\n}), 'ArrowUpward');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n}), 'ArrowDownward');","import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Button } from '@mui/material';\r\nimport {\r\n    Speed as SpeedIcon,\r\n    Check as CheckIcon,\r\n    ArrowUpward as ArrowUpwardIcon,\r\n    ArrowDownward as ArrowDownwardIcon,\r\n    /* VisibilityOff as VisibilityOffIcon,\r\n    Construction as ConstructionIcon, */\r\n    ModeEdit as EditIcon\r\n} from '@mui/icons-material';\r\nimport {\r\n    DataGrid,\r\n    GridToolbarContainer,\r\n    GridToolbarColumnsButton,\r\n    GridToolbarFilterButton,\r\n    GridToolbarExport,\r\n    GridToolbarDensitySelector,\r\n    zhCN\r\n} from '@mui/x-data-grid';\r\n\r\nlet selectedArr = []; //当前选中的产品id，需要转换成加密id才可以调用API\r\nlet updatedArr = []; //更新了的行\r\nfunction ProductTable({\r\n    tableRows,\r\n    tableColumns,\r\n    page_size,\r\n    page,\r\n    total,\r\n    localization,\r\n    langPack,\r\n    updateProduct,\r\n    checkProductScore,\r\n    changeProductDisplay,\r\n    handleChangePage,\r\n    handleChangeRowsPerPage,\r\n    onRowClick\r\n}) {\r\n    const navigate = useNavigate(); //react-router-dom\r\n    //DataGrid toolbar;\r\n    let [checkboxSelection /* , setCheckboxSelection */] = useState(true);\r\n    //let [menuControlText, setMenuControlText] = useState(langPack.tableToolbar.menuHide);\r\n    const tableHeight = window.innerHeight > 520 ? window.innerHeight - 320 : 600;\r\n    const onStateChange = (obj) => {\r\n        let { selection } = obj;\r\n        if (selection.length === selectedArr.length) return;\r\n        selectedArr = selection.map((id) => tableRows.find((obj) => obj.id === id));\r\n        console.log(selectedArr.length + ' selected');\r\n    }; //勾选\r\n    const onCellEditCommit = (params) => {\r\n        let { id, row, field, value } = params;\r\n        let oldIndex = tableRows.findIndex((obj) => obj.id === id);\r\n        if (oldIndex === -1) return; //没找到?\r\n        let oldValue = tableRows[oldIndex][field];\r\n        if (oldValue === value) {\r\n            updatedArr[oldIndex] = undefined;\r\n            return;\r\n        } //先对比原始数据，如果没有改变，则不更新\r\n        let newData = { ...row, [field]: value };\r\n        updatedArr[oldIndex] = newData; //不管改不改，先存着再说\r\n        return;\r\n    };\r\n    return (\r\n        <div style={{ height: tableHeight, width: '100%' }}>\r\n            <DataGrid\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                checkboxSelection={checkboxSelection}\r\n                localeText={localization.locale === 'zhCN' ? zhCN.components.MuiDataGrid.defaultProps.localeText : {}}\r\n                components={{\r\n                    Toolbar: () => (\r\n                        <GridToolbarContainer>\r\n                            <GridToolbarColumnsButton />\r\n                            <GridToolbarFilterButton />\r\n                            <GridToolbarDensitySelector />\r\n                            <GridToolbarExport\r\n                                csvOptions={{\r\n                                    utf8WithBom: true,\r\n                                    fileName:\r\n                                        langPack.table.tableHeader +\r\n                                        '_' +\r\n                                        new Date(new Date().valueOf() - new Date().getTimezoneOffset() * 60 * 1000)\r\n                                            .toISOString()\r\n                                            .replace(/T.*/, '')\r\n                                }}\r\n                            />\r\n                            {/* <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={\r\n                                        menuControlText === langPack.tableToolbar.menuHide ? <VisibilityOffIcon /> : <ConstructionIcon />\r\n                                    }\r\n                                    onClick={() => {\r\n                                        setCheckboxSelection(!checkboxSelection);\r\n                                        setMenuControlText(\r\n                                            menuControlText === langPack.tableToolbar.menuHide\r\n                                                ? langPack.tableToolbar.menuShow\r\n                                                : langPack.tableToolbar.menuHide\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    {menuControlText}\r\n                                </Button> */}\r\n                            <Button sx={{ padding: '4px 5px' }} startIcon={<SpeedIcon />} onClick={checkProductScore}>\r\n                                {langPack.tableToolbar.productScore}\r\n                            </Button>\r\n                            <span hidden={!selectedArr.length}>\r\n                                <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={<ArrowUpwardIcon />}\r\n                                    onClick={() => {\r\n                                        let list = selectedArr.map((obj) => obj.product_id).join(',');\r\n                                        changeProductDisplay({\r\n                                            new_display: 'on',\r\n                                            product_id_list: list\r\n                                        });\r\n                                    }}\r\n                                >\r\n                                    {langPack.tableToolbar.productDisplayOn}\r\n                                </Button>\r\n                                <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={<ArrowDownwardIcon />}\r\n                                    onClick={() => {\r\n                                        let list = selectedArr.map((obj) => obj.product_id).join(',');\r\n                                        changeProductDisplay({\r\n                                            new_display: 'off',\r\n                                            product_id_list: list\r\n                                        });\r\n                                    }}\r\n                                >\r\n                                    {langPack.tableToolbar.productDisplayOff}\r\n                                </Button>\r\n                                <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={<EditIcon />}\r\n                                    disabled={selectedArr.length !== 1}\r\n                                    onClick={() => {\r\n                                        if (!selectedArr.length) return;\r\n                                        let product_id = selectedArr.map((obj) => obj.product_id).join(',');\r\n                                        navigate(`/product/${product_id}`);\r\n                                        return;\r\n                                    }}\r\n                                >\r\n                                    {langPack.tableToolbar.productEdit}\r\n                                </Button>\r\n                            </span>\r\n                            <span hidden={!updatedArr.length}>\r\n                                <Button\r\n                                    color=\"error\"\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={<CheckIcon />}\r\n                                    onClick={async () => {\r\n                                        await updateProduct(updatedArr);\r\n                                        updatedArr = [];\r\n                                    }}\r\n                                >\r\n                                    {langPack.tableToolbar.productUpdate}\r\n                                </Button>\r\n                            </span>\r\n                        </GridToolbarContainer>\r\n                    )\r\n                }}\r\n                onRowClick={onRowClick}\r\n                onCellEditCommit={onCellEditCommit}\r\n                onStateChange={onStateChange}\r\n                page={page}\r\n                pageSize={page_size}\r\n                rowCount={total}\r\n                columns={tableColumns}\r\n                getRowHeight={() => 88}\r\n                rows={tableRows}\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                disableSelectionOnClick\r\n                paginationMode=\"server\"\r\n                onPageChange={handleChangePage}\r\n                onPageSizeChange={handleChangeRowsPerPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nProductTable.propTypes = {\r\n    tableRows: PropTypes.array,\r\n    tableColumns: PropTypes.array,\r\n    page_size: PropTypes.number,\r\n    page: PropTypes.number,\r\n    total: PropTypes.number,\r\n    localization: PropTypes.object,\r\n    langPack: PropTypes.object,\r\n    updateProduct: PropTypes.func,\r\n    changeProductDisplay: PropTypes.func,\r\n    checkProductScore: PropTypes.func,\r\n    handleChangePage: PropTypes.func,\r\n    handleChangeRowsPerPage: PropTypes.func,\r\n    onRowClick: PropTypes.func\r\n};\r\n\r\nexport default ProductTable;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SET_APPDATA } from 'store/actions';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport { Languages } from './Languages';\nimport ProductFolder from './component/ProductFolder';\nimport ProductTable from './component/ProductTable';\n\n// ==============================|| SINGLE PAGE APPLICATION ||============================== //\nconst App = () => {\n    console.log('product app running');\n    const dispatch = useDispatch();\n    const localization = useSelector((state) => state.localization); //read only (language related)\n    let [langPack, setLangPack] = useState(Languages[localization.locale]); //currentLanguage\n    const navigate = useNavigate(); //react-router-dom\n    const globalization = useSelector((state) => state.globalization);\n    const [loginData] = useState(globalization.baseData.loginData);\n    let [appData, setAppData] = useState(globalization.appData); //全局数据暂存\n\n    //states [所有文件夹 ， 当前文件夹 ， 当前页 ， 页面大小，总数]\n    let parentFolderArr = []; //临时存放下文件夹id，因为数据不返回名字，还需要遍历下\n    let [folderArr, setFolderArr] = useState([]);\n    let [currentFolder, setCurrentFolder] = useState(langPack.folder.currentFolder);\n    let [page, setPage] = useState(0);\n    let [page_size, setPage_size] = useState(10);\n    let [total, setTotal] = useState(0);\n\n    //data grid 相关\n    let [tableColumns, setTableColumns] = useState([]);\n    let [tableRows, setTableRows] = useState([]);\n\n    useEffect(() => {\n        dispatch({ type: SET_APPDATA, appData });\n    }, [dispatch, appData]); //全局数据修改，因为登录\n\n    useEffect(() => {\n        if (folderArr.length && tableRows.length) {\n            setAppData({ ...globalization.appData, appProduct: { folderArr, tableRows, total, currentFolder } });\n        }\n        return () => {};\n    }, [folderArr, tableRows]); //订阅全局数据变化\n\n    useEffect(() => {\n        if (currentFolder && currentFolder !== langPack.folder.currentFolder) {\n            getProductList();\n            setPage(0);\n            tableFormatter();\n        }\n        return; //更换文件夹时\n    }, [currentFolder]);\n\n    useEffect(() => {\n        setLangPack(Languages[localization.locale]);\n        return; //语言切换\n    }, [localization.locale]);\n\n    useEffect(() => {\n        console.log(tableRows);\n        return; //表格数据变动\n    }, [tableRows]);\n\n    useEffect(() => {\n        return () => {};\n    }, [globalization.appData]); //订阅全局数据变化\n\n    useEffect(() => {\n        console.log('I want products');\n        if (!loginData) return navigate('/');\n        let cache = globalization.appData.appProduct;\n        if (cache) {\n            if (!cache.folderArr || !cache.folderArr.length) getFolders();\n            else setFolderArr(cache.folderArr);\n            if (!cache.tableRows || !cache.tableRows.length) getProductList();\n            else setTableRows(cache.tableRows);\n            if (cache.total) setTotal(cache.total);\n            setCurrentFolder(cache.currentFolder);\n        } //读取缓存\n        else {\n            getFolders();\n            getProductList();\n        }\n        //初始化\n        tableFormatter();\n        return () => {\n            console.log('I leave products');\n        }; //载入 & 清理\n    }, []);\n\n    //____________一些函数_______________________________________________\n\n    async function addFolder(obj) {\n        let paramObj = ma.productGroupAddQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg.response.result);\n        let res = ma.productGroupAddCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(status, result);\n        let { group_id, group_name } = result;\n        setFolderArr([...folderArr, { group_id, group_name }]);\n    } //新增文件夹\n    async function getFolders(obj, max) {\n        let paramObj = ma.productGroupQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg.response.result);\n        let res = ma.productGroupCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        if (!obj) {\n            parentFolderArr = []; //清空下\n            //获取主目录，然后开始遍历\n            let childIdArr = result['children_id_list']['number'];\n            if (!childIdArr || !childIdArr.length) return;\n            childIdArr.forEach((id) => getFolders({ group_id: id }, childIdArr.length));\n        } else {\n            let { group_id, group_name } = result;\n            parentFolderArr.push({ group_id, group_name });\n            if (parentFolderArr.length === max) setFolderArr(parentFolderArr);\n        }\n    } //获取文件夹列表\n    async function getProductList(obj) {\n        if (!obj) obj = {};\n        if (currentFolder && currentFolder !== langPack.folder.currentFolder) {\n            obj.group_id1 = currentFolder;\n        } //子分组\n        let paramObj = ma.productListQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg.response.result);\n        let res = ma.productListCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        if (tableColumns.find((obj) => obj.field === 'final_score')) tableFormatter();\n        if (result.products) {\n            let arr = result.products.alibaba_product_brief_response;\n            if (!arr || !arr.length) return;\n            let rowData = arr.map((obj) => {\n                return {\n                    ...obj,\n                    keywords: obj.keywords ? obj.keywords.string.toString() : '',\n                    images: obj.main_image ? obj.main_image.images.string.toString() : ''\n                };\n            }); //Flatten the data structure to make a easy post\n            setTableRows(rowData);\n            setTotal(result.total_item);\n            return;\n        }\n        setTableRows([]);\n        setTotal(0);\n        return;\n    } //获取产品列表\n    async function changeProductDisplay(obj) {\n        if (!obj) return false;\n        let paramObj = ma.productDisplayQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg.response.result);\n        let res = ma.productDisplayCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        setTimeout(getProductList, 2000);\n        return;\n    } //产品上下架\n    async function checkProductScore() {\n        if (!tableRows.length) return;\n        let scoreArr = [];\n        for (let obj of tableRows) {\n            console.log('checking scores');\n            let { product_id } = obj;\n            let paramObj = ma.productScoreQuery({ product_id });\n            let msg = await fetchAPI(paramObj);\n            if (!msg.response.status) {\n                scoreArr.push({});\n                queryResult(false, langPack.steps.productScoreError);\n                continue;\n            } //网络异常\n            let res = ma.productScoreCheck(msg);\n            let { status, result } = res.response;\n            if (!status) {\n                scoreArr.push({});\n                queryResult(false, result);\n                continue;\n            } //没查到\n            scoreArr.push(result);\n        }\n        setTableRows((prev) => {\n            let newArr = [];\n            for (let i = 0; i < prev.length; i++) {\n                newArr.push({ ...prev[i], ...scoreArr[i] });\n            }\n            return newArr;\n        });\n        scoreArr = undefined;\n        tableFormatter({ score: true });\n        return;\n    } //产品分`批量查询\n    async function updateProduct(productArr) {\n        if (!productArr || !productArr.length) return;\n        for (let obj of productArr) {\n            if (!obj) continue;\n            let { category_id, keywords, /* main_image, */ product_type, subject, product_id } = obj;\n            let newObj = { category_id, keywords, product_type, subject, product_id };\n            await updateProductInfo(newObj);\n        }\n        setTimeout(() => {\n            getProductList({ current_page: page + 1, page_size });\n        }, 2000); //数据更新可能有延迟，缓冲下\n        return;\n    } //产品信息更新\n    async function updateProductInfo(obj) {\n        let paramObj = ma.productFieldUpdateQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg.response.result);\n        let res = ma.productFieldUpdateCheck(msg);\n        let { status, result } = res.response;\n        queryResult(status, result);\n        console.log(result);\n        return true;\n    } //更新产品信息\n\n    //____________ ProductTable functions ___________________________________________________\n    function tableFormatter(obj) {\n        const columns = [\n            {\n                field: 'imgWithURL',\n                headerName: langPack.table.tableHeader,\n                minWidth: 50,\n                valueGetter: ({ row }) => row,\n                valueFormatter: ({ value }) => value.pc_detail_url,\n                renderCell: ({ value }) => (\n                    <a href={value.pc_detail_url} target=\"_blank\">\n                        <img {...srcset(value.images.split(',')[0], 100, 100, 1, 1)} alt=\"mainPic\" />\n                    </a>\n                )\n            },\n            {\n                field: 'subject',\n                editable: true,\n                minWidth: 300,\n                headerName: langPack.table.subject\n            },\n            {\n                field: 'keywords',\n                editable: true,\n                flex: 1,\n                headerName: langPack.table.keywords,\n                preProcessEditCellProps: (params) => {\n                    let { value } = params.props;\n                    if (value) {\n                        let newArr = value.split(',');\n                        if (newArr.length > 3) {\n                            newArr.length = 3;\n                            queryResult(false, langPack.form.keywords);\n                            let keywords = newArr.join(',');\n                            return { ...params.props, keywords, error: true };\n                        }\n                    }\n                    return params.props;\n                } //修改校验\n            },\n            {\n                field: 'status',\n                flex: 0.5,\n                headerName: langPack.table.status\n            },\n            {\n                field: 'display',\n                flex: 0.5,\n                headerName: langPack.table.display\n            },\n            {\n                field: 'gmt_create',\n                flex: 1,\n                headerName: langPack.table.gmt_create\n            },\n            {\n                field: 'gmt_modified',\n                flex: 1,\n                headerName: langPack.table.gmt_modified\n            }\n        ];\n        if (obj) {\n            let { score } = obj;\n            if (score) {\n                columns.splice(\n                    5,\n                    0,\n                    {\n                        field: 'final_score',\n                        headerName: langPack.table.score,\n                        flex: 0.5,\n                        sortable: true\n                    },\n                    {\n                        field: 'tag',\n                        headerName: langPack.table.tag,\n                        flex: 0.5,\n                        sortable: true\n                    }\n                ); // inserts\n            }\n        }\n        setTableColumns(columns);\n    }\n\n    const handleChangePage = (newPage) => {\n        setPage(newPage);\n        getProductList({ current_page: newPage + 1, page_size });\n    }; //翻页\n    const handleChangeRowsPerPage = (newSize) => {\n        setPage_size(newSize);\n        getProductList({ current_page: page + 1, page_size: newSize });\n    }; //页面大小调整\n    const onRowClick = (obj, e) => {\n        // let { id, row } = obj;\n    }; //单元格点击\n\n    //____________JSX函数_______________________________________________\n\n    return (\n        <MainCard title=\"Products --产品\">\n            <ProductFolder\n                folderArr={folderArr}\n                currentFolder={currentFolder}\n                addFolder={addFolder}\n                setCurrentFolder={setCurrentFolder}\n                langPack={langPack}\n            />\n            <ProductTable\n                tableRows={tableRows}\n                tableColumns={tableColumns}\n                page_size={page_size}\n                page={page}\n                total={total}\n                localization={localization}\n                langPack={langPack}\n                updateProduct={updateProduct}\n                checkProductScore={checkProductScore}\n                changeProductDisplay={changeProductDisplay}\n                handleChangePage={handleChangePage}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n                onRowClick={onRowClick}\n            />\n        </MainCard>\n    );\n};\n\nexport default App;\n"],"sourceRoot":""}