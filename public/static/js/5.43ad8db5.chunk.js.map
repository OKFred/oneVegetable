{"version":3,"sources":["views/product/component/ProductFolder.js","views/product/index.js"],"names":["ProductFolder","folderArr","currentFolder","addFolder","setCurrentFolder","folderRefresh","langPack","useState","newFolder","setNewFolder","folderCommand","setFolderCommand","a","queryResult","folder","needFolderName","group_name","refreshFolders","style","marginBottom","Input","sx","height","marginRight","variant","color","type","placeholder","addNewFolder","onChange","e","target","value","trim","Button","startIcon","Check","onClick","common","yes","Cancel","no","display","flexDirection","justifyContent","length","Breadcrumbs","Folder","Select","minWidth","autoWidth","MenuItem","disabled","map","obj","index","group_id","Typography","folderNull","ButtonGroup","Add","Refresh","scoreArr","App","onProductSelected","console","log","dispatch","useDispatch","navigate","useNavigate","globalization","useSelector","state","localization","Languages","locale","setLangPack","baseData","loginData","appData","setAppData","parentFolderArr","setFolderArr","page","setPage","page_size","setPage_size","total","setTotal","tableColumns","setTableColumns","tableRows","setTableRows","columnVisibilityModel","setColumnVisibilityModel","loadingProgress","setLoadingProgress","scoreAutoQuery","setScoreAutoQuery","paramObj","ma","productGroupAddQuery","fetchAPI","msg","response","status","netFail","result","res","productGroupAddCheck","getFolders","max","productGroupQuery","productGroupCheck","childIdArr","forEach","id","push","url","folderRequired","useEffect","SET_APPDATA","appProduct","getProductList","tableFormatter","realLength","checkScore","cache","cacheHandler","duplicateProduct","category_id","getProduct","product_id","xml","submitProductSchema","setTimeout","productSchemaRenderQuery","param_product_top_publish_request","JSON","stringify","language","productSchemaRenderCheck","catId","editMode","real_product_id","description","queryMethod","productSchemaAddQuery","checkMethod","productSchemaAddCheck","productSchemaUpdateQuery","productSchemaUpdateCheck","productId","xmldom","DOMParser","parseFromString","children","querySelector","remove","Array","from","querySelectorAll","node","outerHTML","replace","encodeNonASCII","params","cat_id","Number","steps","addSuccess","duplicateSuccess","updateSuccess","group_id1","productListQuery","productListCheck","find","field","products","arr","alibaba_product_brief_response","rowData","keywords","string","toString","images","main_image","total_item","productDisplayQuery","productDisplayCheck","checkProductScore","productScoreQuery","productScoreCheck","request","data","findIndex","tag","tagCn","tagEn","productScoreError","prev","newArr","i","score","productArr","product_type","subject","newObj","updateProductInfo","current_page","productFieldUpdateQuery","productFieldUpdateCheck","productTableFn","addProduct","updateProduct","changeProductDisplay","columns","headerName","table","tableHeader","valueGetter","row","valueFormatter","pc_detail_url","renderCell","href","srcset","split","width","alt","editable","flex","preProcessEditCellProps","props","form","join","error","is_rts","is_specific","owner_member_display_name","smart_edit","Date","gmt_create","Format","gmt_modified","splice","sortable","MainCard","title","ProductTable","handleChangePage","newPage","handleChangeRowsPerPage","newSize","onRowClick","onTableSelection","selectedArr","undefined"],"mappings":"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","file":"static/js/5.43ad8db5.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Button, ButtonGroup, Input, Select, MenuItem, Breadcrumbs } from '@mui/material';\r\nimport {\r\n    Folder as FolderIcon,\r\n    Check as CheckIcon,\r\n    Cancel as CancelIcon,\r\n    Add as AddIcon,\r\n    ModeEdit as EditIcon,\r\n    DeleteOutline as DeleteIcon,\r\n    FileUpload as UploadIcon,\r\n    Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\n\r\nfunction ProductFolder({ folderArr, currentFolder, addFolder, setCurrentFolder, folderRefresh, langPack }) {\r\n    let [newFolder, setNewFolder] = useState(false);\r\n    let [folderCommand, setFolderCommand] = useState(false);\r\n\r\n    async function onFolderAdd() {\r\n        if (!newFolder) return queryResult(false, langPack.folder.needFolderName);\r\n        let result = await addFolder({ group_name: newFolder });\r\n        if (result) {\r\n            setCurrentFolder('');\r\n            refreshFolders();\r\n        }\r\n        return;\r\n    }\r\n\r\n    function refreshFolders() {\r\n        setNewFolder('');\r\n        setFolderCommand(false);\r\n        return;\r\n    }\r\n\r\n    return (\r\n        <div style={{ marginBottom: '20px' }}>\r\n            {!folderCommand ? (\r\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\r\n                    <span>\r\n                        {!folderArr || !folderArr.length ? (\r\n                            <Typography variant=\"body2\" sx={{ display: 'inline' }}>\r\n                                {langPack.folder.folderNull}\r\n                            </Typography>\r\n                        ) : (\r\n                            <Breadcrumbs aria-label=\"breadcrumb\" sx={{ display: 'inline-block', marginRight: '5px' }}>\r\n                                <FolderIcon />\r\n                                <Select\r\n                                    sx={{ height: '30px', minWidth: '100px' }}\r\n                                    autoWidth={true}\r\n                                    value={currentFolder}\r\n                                    onChange={(e) => setCurrentFolder(e.target.value)}\r\n                                >\r\n                                    <MenuItem value={langPack.folder.currentFolder} disabled>\r\n                                        {langPack.folder.currentFolder}\r\n                                    </MenuItem>\r\n                                    {folderArr.map((obj, index) => (\r\n                                        <MenuItem key={index} value={obj.group_id}>\r\n                                            {obj.group_name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </Breadcrumbs>\r\n                        )}\r\n                        <ButtonGroup variant=\"\">\r\n                            <Button onClick={() => setFolderCommand('add')}>\r\n                                <AddIcon />\r\n                            </Button>\r\n                            <Button onClick={() => setFolderCommand('edit')} disabled>\r\n                                <EditIcon />\r\n                            </Button>\r\n                            <Button onClick={() => setFolderCommand('delete')} disabled>\r\n                                <DeleteIcon />\r\n                            </Button>\r\n                            <Button onClick={() => setFolderCommand('upload')} disabled>\r\n                                <UploadIcon />\r\n                            </Button>\r\n                            <Button onClick={folderRefresh}>\r\n                                <RefreshIcon />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </span>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    {folderCommand === 'add' ? (\r\n                        <>\r\n                            <Input\r\n                                sx={{ height: '30px', marginRight: '10px' }}\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                type=\"text\"\r\n                                placeholder={langPack.folder.addNewFolder}\r\n                                onChange={(e) => setNewFolder(e.target.value.trim())}\r\n                            />\r\n                            <Button startIcon={<CheckIcon />} onClick={onFolderAdd}>\r\n                                {langPack.common.yes}\r\n                            </Button>\r\n                            <Button startIcon={<CancelIcon />} onClick={() => setFolderCommand(false)}>\r\n                                {langPack.common.no}\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nProductFolder.propTypes = {\r\n    localization: PropTypes.object,\r\n    finalDescription: PropTypes.string,\r\n    setFinalDescription: PropTypes.func,\r\n    folderArr: PropTypes.array,\r\n    currentFolder: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    addFolder: PropTypes.func,\r\n    setCurrentFolder: PropTypes.func,\r\n    folderRefresh: PropTypes.func,\r\n    langPack: PropTypes.object\r\n};\r\n\r\nexport default ProductFolder;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SET_APPDATA } from 'store/actions';\nimport PropTypes from 'prop-types';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport { Languages } from './Languages';\nimport ProductFolder from './component/ProductFolder';\nimport ProductTable from './component/ProductTable';\n\n// ==============================|| SINGLE PAGE APPLICATION ||============================== //\nlet scoreArr = []; //产品分数据，暂存\nconst App = ({ onProductSelected }) => {\n    console.log('product app running');\n    const dispatch = useDispatch();\n    const navigate = useNavigate(); //react-router-dom\n    const globalization = useSelector((state) => state.globalization);\n    const localization = useSelector((state) => state.localization); //read only (language related)\n    let [langPack, setLangPack] = useState(Languages[localization.locale]); //currentLanguage\n    const [loginData] = useState(globalization.baseData.loginData);\n    let [appData, setAppData] = useState(globalization.appData); //全局数据暂存\n\n    //states [所有文件夹 ， 当前文件夹 ， 当前页 ， 页面大小，总数]\n    let parentFolderArr = []; //临时存放下文件夹id，因为数据不返回名字，还需要遍历下\n    let [folderArr, setFolderArr] = useState([]);\n    let [currentFolder, setCurrentFolder] = useState(langPack.folder.currentFolder);\n    let [page, setPage] = useState(0);\n    let [page_size, setPage_size] = useState(10);\n    let [total, setTotal] = useState(0);\n\n    //data grid 相关\n    let [tableColumns, setTableColumns] = useState([]);\n    let [tableRows, setTableRows] = useState([]);\n    let [columnVisibilityModel, setColumnVisibilityModel] = useState({});\n    let [loadingProgress, setLoadingProgress] = useState(100); //loading/loaded\n    let [scoreAutoQuery, setScoreAutoQuery] = useState(false);\n\n    useEffect(() => {\n        dispatch({ type: SET_APPDATA, appData });\n    }, [dispatch, appData]); //全局数据修改，因为登录\n\n    useEffect(() => {\n        if (folderArr.length && tableRows.length) {\n            setAppData({ ...globalization.appData, appProduct: { folderArr, tableRows, total, currentFolder } });\n        }\n        return () => {};\n    }, [folderArr, tableRows]); //订阅全局数据变化\n\n    useEffect(() => {\n        if (currentFolder && currentFolder !== langPack.folder.currentFolder) {\n            getProductList();\n            setPage(0);\n            tableFormatter();\n        }\n        return; //更换文件夹时\n    }, [currentFolder]);\n\n    useEffect(() => {\n        setLangPack(Languages[localization.locale]);\n        return; //语言切换\n    }, [localization.locale]);\n\n    useEffect(() => {\n        if (tableRows.length && scoreAutoQuery) {\n            if (!scoreArr.realLength) checkScore();\n        } else {\n            tableFormatter();\n        }\n        return () => console.log('no need to check the scores');\n    }, [tableRows, scoreAutoQuery]); //订阅表格变化\n\n    useEffect(() => {\n        console.log('I want products');\n        if (!loginData) return navigate('/');\n        //初始化\n        cacheHandler();\n        tableFormatter();\n        return () => {\n            console.log('I leave products');\n        }; //载入 & 清理\n    }, []);\n\n    function cacheHandler() {\n        let cache = globalization.appData.appProduct;\n        if (cache) {\n            if (!cache.folderArr || !cache.folderArr.length) getFolders();\n            else setFolderArr(cache.folderArr);\n            if (!cache.tableRows || !cache.tableRows.length) getProductList();\n            else setTableRows(cache.tableRows);\n            if (cache.total) setTotal(cache.total);\n            setCurrentFolder(cache.currentFolder);\n        } else {\n            getFolders();\n            getProductList();\n        }\n    } //读取缓存\n\n    //____________一些函数_______________________________________________\n\n    async function addFolder(obj) {\n        let paramObj = ma.productGroupAddQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productGroupAddCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(status, result);\n        let { group_id, group_name } = result;\n        setFolderArr([...folderArr, { group_id, group_name }]);\n    } //新增文件夹\n\n    async function getFolders(obj, max) {\n        let paramObj = ma.productGroupQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productGroupCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        if (!obj) {\n            parentFolderArr = []; //清空下\n            //获取主目录，然后开始遍历\n            let childIdArr = result['children_id_list']['number'];\n            if (!childIdArr || !childIdArr.length) return;\n            childIdArr.forEach((id) => getFolders({ group_id: id }, childIdArr.length));\n        } else {\n            let { group_id, group_name } = result;\n            parentFolderArr.push({ group_id, group_name });\n            if (parentFolderArr.length === max) setFolderArr(parentFolderArr);\n        }\n    } //获取文件夹列表\n\n    async function addProduct() {\n        if (currentFolder && currentFolder !== langPack.folder.currentFolder) {\n            let url = '/product/draft/group_id=' + currentFolder;\n            return navigate(url);\n        } else return queryResult(false, langPack.folder.folderRequired);\n    } //发产品\n\n    let duplicateProduct = async (obj) => {\n        console.log('duplicating...');\n        let { id, category_id } = obj;\n        let xml = await getProduct({ product_id: id });\n        if (!xml) return console.log('product schema error');\n        await submitProductSchema(xml, category_id, 'duplicate');\n        return setTimeout(getProductList, 2000);\n    }; //创建副本 (①获取模板 ②获取范本 ③获取详情（智能编辑暂不支持） ④提交)\n\n    async function getProduct(obj) {\n        let paramObj = ma.productSchemaRenderQuery({\n            param_product_top_publish_request: JSON.stringify({\n                ...obj,\n                language: localization.locale === 'enUS' ? 'en_US' : 'zh'\n            })\n        });\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productSchemaRenderCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(status, result);\n        return result;\n    } //获取 现有产品信息  &  编辑模板\n\n    async function getProductEncryptId(obj) {\n        let paramObj = ma.productEncryptIdQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productEncryptIdCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(status, result);\n        return result;\n    } //获取 加密后的ID，用于获取产品详情\n\n    async function getProductInfo(obj) {\n        let paramObj = ma.productDetailQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productDetailCheck(msg);\n        let { status, result } = res.response;\n        if (!status || !result) return queryResult(status, result);\n        return result;\n    } //获取产品信息（含详情）\n\n    function onDescriptionChange(value) {\n        if (!value || !value.trim()) return; //校验\n        let valueSaver = value.trim().encodeHTMLEntity();\n        if (valueSaver.length > 50000) return queryResult(false, langPack.form.descriptionOverflow);\n        let xml_productDescription = `<field id=\"superText\" name=\"Custom Description \" type=\"input\"><value>${valueSaver}</value></field>`;\n        let xml_productType = `<field id=\"productDescType\" type=\"singleCheck\"><value>2</value></field>`;\n        let xml = String(xml_productDescription + xml_productType).trim();\n        return xml;\n    } //产品详情打包\n\n    async function submitProductSchema(xml, catId, editMode, real_product_id, description) {\n        let queryMethod;\n        let checkMethod;\n        let productId;\n        if (editMode === 'add') {\n            queryMethod = ma.productSchemaAddQuery;\n            checkMethod = ma.productSchemaAddCheck;\n        } /* else if (editMode === 'duplicate') {\n            queryMethod = ma.productSchemaAddDraftQuery;\n            checkMethod = ma.productSchemaAddDraftCheck;\n        } */ else {\n            queryMethod = ma.productSchemaUpdateQuery;\n            checkMethod = ma.productSchemaUpdateCheck;\n            productId = real_product_id;\n        }\n        let xmldom = new DOMParser().parseFromString(xml, 'text/xml');\n        if (description) {\n            xmldom.children[0].querySelector('field#productDescType').remove();\n            xmldom.children[0].querySelector('field#superText').remove();\n        } //产品详情替换（如果有必要的话）\n        Array.from(xmldom.querySelectorAll('itemSchema > field > rules, options, label-group, fields')).forEach((node) => node.remove());\n        Array.from(xmldom.children[0].children).forEach((node) => (!node.children.length ? node.remove() : ''));\n        xml = xmldom.children[0].outerHTML;\n        if (description) xml = xml.replace(/<\\/itemSchema>$/, '') + description + `</itemSchema>`;\n        xml = xml.encodeNonASCII();\n        let params = {\n            xml,\n            cat_id: Number(catId),\n            language: localization.locale === 'enUS' ? 'en_US' : 'zh'\n        };\n        if (productId) params.product_id = productId;\n        let paramObj = queryMethod({\n            param_product_top_publish_request: JSON.stringify(params)\n        });\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = checkMethod(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(status, result);\n        queryResult(\n            true,\n            editMode === 'add'\n                ? langPack.steps.addSuccess\n                : editMode === 'duplicate'\n                ? langPack.steps.duplicateSuccess\n                : langPack.steps.updateSuccess\n        );\n        return result;\n    } //发品（添加/修改）\n\n    async function getProductList(obj) {\n        setLoadingProgress(0);\n        scoreArr = []; //获取新产品的时重置下\n        if (!obj) obj = {};\n        if (currentFolder && currentFolder !== langPack.folder.currentFolder) {\n            obj.group_id1 = currentFolder;\n        } //子分组\n        let paramObj = ma.productListQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        setLoadingProgress(100);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productListCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        if (tableColumns.find((obj) => obj.field === 'final_score')) tableFormatter();\n        if (result.products) {\n            let arr = result.products.alibaba_product_brief_response;\n            if (!arr || !arr.length) return;\n            let rowData = arr.map((obj) => {\n                return {\n                    ...obj,\n                    keywords: obj.keywords ? obj.keywords.string.toString() : '',\n                    images: obj.main_image ? obj.main_image.images.string.toString() : ''\n                };\n            }); //Flatten the data structure to make a easy post\n            setTableRows(rowData);\n            setTotal(result.total_item);\n            return;\n        }\n        setTableRows([]);\n        setTotal(0);\n        return;\n    } //获取产品列表\n\n    async function changeProductDisplay(obj) {\n        if (!obj) return false;\n        let paramObj = ma.productDisplayQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productDisplayCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        setTimeout(getProductList, 2000);\n        return;\n    } //产品上下架\n\n    async function checkScore() {\n        if (!tableRows.length) return;\n        setLoadingProgress(0);\n        scoreArr.realLength = 0;\n        tableRows.forEach((obj) => {\n            console.log('checking scores');\n            let { product_id } = obj;\n            checkProductScore({ product_id });\n        });\n        return;\n    } //订单资金`批量查询\n\n    async function checkProductScore(obj) {\n        let paramObj = ma.productScoreQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        let res = ma.productScoreCheck(msg);\n        let { product_id } = res.request.data;\n        let index = tableRows.findIndex((obj) => obj.product_id === product_id);\n        if (index === -1) {\n            setLoadingProgress(100);\n            return;\n        } //没有找到对应的产品，可能刷新了\n        let { status, result } = res.response;\n        if (!status) {\n            //网络异常 or 没查到\n            scoreArr[index] = {};\n            queryResult(false, langPack.steps.productScoreError);\n        } else {\n            localization.locale === 'zhCN' ? (result.tag = result.tagCn) : (result.tag = result.tagEn);\n            scoreArr[index] = result;\n        }\n        scoreArr.realLength++;\n        if (scoreArr.realLength) setLoadingProgress((scoreArr.realLength / tableRows.length) * 100);\n        if (scoreArr.realLength !== tableRows.length) return; //还未集齐\n        setLoadingProgress(100);\n        setTableRows((prev) => {\n            let newArr = [];\n            for (let i = 0; i < prev.length; i++) {\n                newArr.push({ ...prev[i], ...scoreArr[i] });\n            }\n            //console.log(newArr);\n            return newArr;\n        });\n        tableFormatter({ score: true });\n        return;\n    } //产品分`批量查询\n\n    async function updateProduct(productArr) {\n        if (!productArr || !productArr.length) return;\n        for (let obj of productArr) {\n            if (!obj) continue;\n            let { category_id, keywords, /* main_image, */ product_type, subject, product_id } = obj;\n            let newObj = { category_id, keywords, product_type, subject, product_id };\n            await updateProductInfo(newObj);\n        }\n        setTimeout(() => {\n            getProductList({ current_page: page + 1, page_size });\n        }, 2000); //数据更新可能有延迟，缓冲下\n        return;\n    } //产品信息更新\n\n    async function updateProductInfo(obj) {\n        let paramObj = ma.productFieldUpdateQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\n        let res = ma.productFieldUpdateCheck(msg);\n        let { status, result } = res.response;\n        queryResult(status, result);\n        console.log(result);\n        return true;\n    } //更新产品信息\n\n    const folderRefresh = async () => {\n        getProductList({ current_page: page + 1, page_size });\n    };\n\n    //____________ ProductTable functions ___________________________________________________\n    let productTableFn = { scoreAutoQuery, setScoreAutoQuery, addProduct, updateProduct, changeProductDisplay, duplicateProduct };\n    function tableFormatter(obj) {\n        const columns = [\n            {\n                field: 'imgWithURL',\n                headerName: langPack.table.tableHeader,\n                minWidth: 50,\n                valueGetter: ({ row }) => row,\n                valueFormatter: ({ value }) => value.pc_detail_url,\n                renderCell: ({ value }) => (\n                    <a href={value.pc_detail_url} target=\"_blank\">\n                        <img {...srcset(value.images.split(',')[0], 100, 100, 1, 1)} style={{ width: '93%' }} alt=\"mainPic\" />\n                    </a>\n                )\n            },\n            {\n                field: 'id',\n                headerName: langPack.table.id\n            },\n            {\n                field: 'subject',\n                editable: true,\n                minWidth: 300,\n                headerName: langPack.table.subject\n            },\n            {\n                field: 'keywords',\n                editable: true,\n                flex: 1,\n                headerName: langPack.table.keywords,\n                preProcessEditCellProps: (params) => {\n                    let { value } = params.props;\n                    if (value) {\n                        let newArr = value.split(',');\n                        if (newArr.length > 3) {\n                            newArr.length = 3;\n                            queryResult(false, langPack.form.keywords);\n                            let keywords = newArr.join(',');\n                            return { ...params.props, keywords, error: true };\n                        }\n                    }\n                    return params.props;\n                } //修改校验\n            },\n            {\n                field: 'status',\n                flex: 0.5,\n                headerName: langPack.table.status\n            },\n            {\n                field: 'display',\n                flex: 0.5,\n                headerName: langPack.table.display\n            },\n            {\n                field: 'is_rts',\n                flex: 0.5,\n                headerName: langPack.table.is_rts\n            },\n            {\n                field: 'is_specific',\n                flex: 0.5,\n                headerName: langPack.table.is_specific\n            },\n            {\n                field: 'owner_member_display_name',\n                flex: 0.5,\n                headerName: langPack.table.owner_member_display_name\n            },\n            {\n                field: 'product_type',\n                flex: 0.5,\n                headerName: langPack.table.product_type\n            },\n            {\n                field: 'smart_edit',\n                flex: 0.5,\n                headerName: langPack.table.smart_edit\n            },\n            {\n                field: 'gmt_create',\n                flex: 0.5,\n                valueGetter: ({ row }) => row,\n                valueFormatter: ({ value }) => new Date(value.gmt_create).Format('yyyy-MM-dd hh:mm'),\n                headerName: langPack.table.gmt_create\n            },\n            {\n                field: 'gmt_modified',\n                flex: 0.5,\n                valueGetter: ({ row }) => row,\n                valueFormatter: ({ value }) => new Date(value.gmt_modified).Format('yyyy-MM-dd hh:mm'),\n                headerName: langPack.table.gmt_modified\n            }\n        ];\n        if (obj) {\n            let { score } = obj;\n            if (score) {\n                columns.splice(\n                    5,\n                    0,\n                    {\n                        field: 'final_score',\n                        headerName: langPack.table.score,\n                        flex: 0.5,\n                        sortable: true\n                    },\n                    {\n                        field: 'tag',\n                        headerName: langPack.table.tag,\n                        flex: 0.5,\n                        sortable: true\n                    }\n                ); // inserts\n            }\n        }\n        setTableColumns(columns);\n        setColumnVisibilityModel({\n            id: false, //产品id, 不太用得到\n            is_rts: false, //RTS品，仅CGS\n            is_specific: false, //规格品？不解\n            owner_member_display_name: false, //产品负责人？一般为主账号\n            product_type: false, //商品类型\n            smart_edit: false //智能编辑\n        });\n    }\n\n    const handleChangePage = (newPage) => {\n        setPage(newPage);\n        getProductList({ current_page: newPage + 1, page_size });\n    }; //翻页\n\n    const handleChangeRowsPerPage = (newSize) => {\n        setPage_size(newSize);\n        getProductList({ current_page: page + 1, page_size: newSize });\n    }; //页面大小调整\n\n    const onRowClick = (obj, e) => {\n        // let { id, row } = obj;\n    }; //单元格点击\n\n    const onTableSelection = (selectedArr) => {\n        console.log(selectedArr.length + ' selected');\n        if (onProductSelected !== undefined) onProductSelected(selectedArr);\n        return;\n    }; // 选择产品\n\n    //____________JSX函数_______________________________________________\n\n    return (\n        <MainCard title=\"Products --产品\">\n            <ProductFolder\n                folderArr={folderArr}\n                currentFolder={currentFolder}\n                addFolder={addFolder}\n                setCurrentFolder={setCurrentFolder}\n                folderRefresh={folderRefresh}\n                langPack={langPack}\n            />\n            <ProductTable\n                tableRows={tableRows}\n                tableColumns={tableColumns}\n                page_size={page_size}\n                page={page}\n                total={total}\n                localization={localization}\n                langPack={langPack}\n                columnVisibilityModel={columnVisibilityModel}\n                setColumnVisibilityModel={setColumnVisibilityModel}\n                handleChangePage={handleChangePage}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n                onRowClick={onRowClick}\n                productTableFn={productTableFn}\n                onTableSelection={onTableSelection}\n                loadingProgress={loadingProgress}\n            />\n        </MainCard>\n    );\n};\n\nApp.propTypes = {\n    onProductSelected: PropTypes.func\n};\n\nexport default App;\n"],"sourceRoot":""}