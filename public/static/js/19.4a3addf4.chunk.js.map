{"version":3,"sources":["views/product/component/productFn.js","views/product/component/Confirmation.js","../node_modules/@mui/material/FormGroup/formGroupClasses.js","../node_modules/@mui/material/FormGroup/FormGroup.js","../node_modules/@mui/icons-material/esm/Favorite.js","../node_modules/@mui/icons-material/esm/Home.js","../node_modules/@material-ui/core/esm/colors/grey.js","views/product/component/ProductCategory.js","../node_modules/@mui/icons-material/esm/GridOn.js","views/product/component/ProductUpload.js","views/product/ProductDraft.js"],"names":["ProductFn","xml","editMode","real_product_id","cat_id","locale","a","queryMethod","ma","productSchemaAddQuery","checkMethod","productSchemaAddCheck","productSchemaUpdateQuery","productSchemaUpdateCheck","xmldom","DOMParser","parseFromString","Array","from","querySelectorAll","forEach","node","remove","children","length","outerHTML","params","language","product_id","paramObj","param_product_top_publish_request","JSON","stringify","fetchAPI","msg","response","status","res","xmlGetField","id","schema","querySelector","insideCheck","nodeArr","newSubArr","subArr","index","subObj","fieldCheck","options","values","innerHTML","value","push","optionNodes","valueNodes","resultObj","attributeObj","getAttributeObj","generalCheck","type","schemaSubmit","schemaChecker","productObj","Object","keys","xmlArr","map","obj","xmlString","firstChild","replace","encodeNonASCII","schemaMaker","pureFunction","imageObjMaker","fieldObj","_values","key","sort","b","Number","exec","imageObjChecker","imageObj","valueArr","newObj","newArr","filter","valueTagName","valueTemplates","valueSaver","newXml","append","productGroupObjMaker","productGroupObjChecker","productGroupObj","valueTemplate","productTypeObjMaker","_options","displayName","find","productTypeObjChecker","productTypeObj","subjectObjMaker","subjectObjChecker","subjectObj","trim","keywordObjMaker","join","keywordObjChecker","keywordObj","keyword","MOQObjMaker","MOQObjChecker","MOQObj","paymentMethodObjMaker","paymentMethodObjChecker","paymentMethodObj","predefinedMethodTemplate","valueStr","priceUnitObjMaker","priceUnitObjChecker","priceUnitObj","valueObj","portObjMaker","portObjChecker","portObj","logisticsObjMaker","logisticsObjChecker","logisticsModeObj","packaingDescriptionObjMaker","packaingDescriptionObjChecker","packagingDescriptionObj","priceObjMaker","quantity","price","priceObjChecker","priceObj","priceArr","i","ladderPeriodObjMaker","day","ladderPeriodObjChecker","ladderPeriodObj","supplyAbilityObjMaker","supplyAbilityObjChecker","supplyAbilityObj","newField","supply_number","time_unit","quantity_unit","attributeObjMaker","name","checkValues","arr","inputValue","undefined","str","newValues","checkOptions","optionObj","test","newOptions","attributeObjChecker","attributeSaver","cleaner","saveAttribute","invalidList","elementValues","document","createElement","elementValue","setAttribute","innerText","String","mainAttributeObj","myOptions","option","subOptionObj","subOption","customStatusObjMaker","customStatusObjChecker","customStatusObj","customObjMaker","optionArr","customObjChecker","customObj","isNaN","shippingTemplateObjMaker","shippingTemplateObjChecker","shippingTemplateObj","weightObjMaker","weightObjChecker","weightObj","measureObjMaker","ranking","indexOf","measureObjChecker","measureObj","split","hasError","num","keyArr","allValueTemplates","saleTypeObjMaker","saleTypeObjChecker","saleTypeObj","batchObjMaker","batchObjChecker","batchObj","descriptionObjMaker","decodeHTMLEntity","descriptionObjChecker","descriptionObj","descriptionTypeObjMaker","descriptionTypeObjChecker","descriptionTypeObj","Confirmation","langPack","productModified","showDetails","modificationSubmission","navigate","useNavigate","modifiedKeys","variant","steps","modificationDone","modificationNull","startIcon","onClick","common","yes","no","getFormGroupUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","FormGroupRoot","styled","overridesResolver","props","styles","ownerState","root","row","_extends","display","flexDirection","flexWrap","FormGroup","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","fcs","formControlState","states","error","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","createSvgIcon","d","grey","A100","A200","A400","A700","BreadChip","Chip","backgroundColor","height","emphasize","boxShadow","ProductCategory","localization","categories","menuRef","menuState","showMenu","closeMenu","menuArr","anchorEl","Breadcrumbs","sx","paddingTop","menuLevel","component","href","label","cn_name","icon","Home","deleteIcon","ExpandMore","onDelete","category_id","Menu","open","Boolean","onClose","MenuItem","PhotoSelector","Loadable","lazy","ProductSelector","ProductUpload","categoryId","groupId","rtsProduct","referredRealProductId","console","log","_sheetFile","useState","columnFormatter","tableColumns","imageArr","subject","keyword_1","keyword_2","keyword_3","payment_methods","unit_type","logistic_mode","shipping_port","packaging_description","tableRows","setTableRows","columnVisibilityModel","setColumnVisibilityModel","loadingProgress","setLoadingProgress","page","setPage","page_size","setPage_size","total","setTotal","sheetRowSelected","setSheetRowSelected","photoDialogOpen","setPhotoDialogOpen","productDialogOpen","setProductDialogOpen","productTemplateSchema","setProductTemplateSchema","showKeys","setShowKeys","allKeyArr","setAllKeyArr","usedKeyArr","setUsedKeyArr","uploaderRef","useRef","productSchemaQuery","queryResult","netFail","result","productSchemaCheck","productFn","uneditable","productSchemaRenderQuery","productSchemaRenderCheck","schemaResult","fileRead","e","text","sheetRows","headerArr","bodyArr","rowArr","allHeaderArr","headerObj","headerName","columnNotFound","field","rowLengthCheck","target","bulkUploadSheetMalformed","rowObj","useEffect","makeProductInfo","toObject","needPost","productArr","productSheetEmpty","productCategoryNeeded","count","postProduct","postResult","sleep","requiredArr","sharedArr","keyAttributeMissing","newProductObj","baseObj","valueOption","RegExp","productPriceUnitNeeded","addSuccess","updateSuccess","productTableFn","needPhoto","rowSelected","needSheet","current","click","needTemplate","table","photos","disableExport","minWidth","valueGetter","valueFormatter","renderCell","src","url","style","width","alt","CloudQueue","editable","flex","keyword1","keyword2","keyword3","FormControlLabel","labelPlacement","control","Input","GridOn","fontSize","onChange","files","size","onPhotoConfirm","newTableRows","newValueArr","dialogOpen","setDialogOpen","onProductConfirm","makeProductExample","hidden","Autocomplete","multiple","limitTags","disableCloseOnSelect","renderOption","selected","Checkbox","marginRight","checked","renderTags","getTagProps","renderInput","TextField","Typography","bulkUploadeTemplateDetails","ProductTable","handleChangePage","newPage","handleChangeRowsPerPage","newSize","onRowClick","onTableSelection","selectedProductArr","App","useSelector","state","globalization","Languages","setLangPack","baseData","loginData","urlParams","URLSearchParams","location","pathname","get","group_id","referred_real_product_id","finalCatId","setFinalCatId","setCategories","categoryArr","menuValue","setMenuState","panel1","expanded","setExpanded","setRtsProduct","getCategoryInfo","productCategoryQuery","productCategoryCheck","productCategoryAttributeQuery","productCategoryAttributeCheck","getAllCategories","category_level","categoryResult","level","parent_ids","number","child_ids","newCategories","getCategoryAttributeInfo","panel","latestCategories","childIdsArr","success","redirecting","setTimeout","MainCard","title","form","category","productType","paddingLeft","Favorite","color","checkedIcon","sourcingProduct","Divider","marginBottom","Accordion","event","isExpanded","prev","AccordionSummary","expandIcon","flexShrink","bulkUploadGuide","bulkUpload","fontWeight","bulkUploadProcesses","AccordionDetails","marginTop"],"mappings":"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","file":"static/js/19.4a3addf4.chunk.js","sourcesContent":["const ProductFn = (() => {\r\n    async function schemaSubmit(xml, editMode, real_product_id, cat_id, locale) {\r\n        let queryMethod;\r\n        let checkMethod;\r\n        if (editMode === 'add') {\r\n            queryMethod = ma.productSchemaAddQuery;\r\n            checkMethod = ma.productSchemaAddCheck;\r\n        } else {\r\n            queryMethod = ma.productSchemaUpdateQuery;\r\n            checkMethod = ma.productSchemaUpdateCheck;\r\n        }\r\n        let xmldom = new DOMParser().parseFromString(xml, 'text/xml');\r\n        Array.from(xmldom.querySelectorAll('itemSchema > field > rules, options, label-group, fields')).forEach((node) => node.remove());\r\n        Array.from(xmldom.children[0].children).forEach((node) => (!node.children.length ? node.remove() : ''));\r\n        xml = xmldom.children[0].outerHTML;\r\n        let params = {\r\n            xml,\r\n            cat_id,\r\n            language: locale === 'zh' ? 'zh' : 'en_US'\r\n        };\r\n        if (real_product_id) params.product_id = real_product_id;\r\n        let paramObj = queryMethod({\r\n            param_product_top_publish_request: JSON.stringify(params)\r\n        });\r\n        let msg = await fetchAPI(paramObj);\r\n        if (!msg.response.status) return msg;\r\n        let res = checkMethod(msg);\r\n        return res;\r\n    } //发品（添加/修改）\r\n\r\n    function schemaChecker(productObj) {\r\n        if (!Object.keys(productObj).length) return;\r\n        let xmlArr = Object.values(productObj).map((obj) => obj.xml);\r\n        let xmlString = '<itemSchema>';\r\n        xmlArr.forEach((xml) => (xmlString += xml.outerHTML));\r\n        xmlString += '</itemSchema>';\r\n        let xmldom = new DOMParser().parseFromString(xmlString, 'text/xml').firstChild; //创建XML副本\r\n        Array.from(xmldom.querySelectorAll('field > rules')).forEach((node) => node.remove());\r\n        xmlString = xmldom.outerHTML.replace(/ xmlns=\"http:\\/\\/www.w3.org\\/1999\\/xhtml\"/gi, '');\r\n        xmlString = xmlString.replace(/inputvalue/g, 'inputValue');\r\n        xmlString = xmlString.encodeNonASCII(); //非ASCII字符须编码\r\n        return xmlString;\r\n    }\r\n\r\n    function schemaMaker(xml, pureFunction) {\r\n        let schema = new DOMParser().parseFromString(xml, 'text/xml');\r\n        if (!pureFunction) ProductFn.schema = schema;\r\n        const errorNode = schema.querySelector('parsererror');\r\n        if (errorNode) return null;\r\n        return schema;\r\n    } //构造编辑框架\r\n\r\n    function xmlGetField(id, schema) {\r\n        if (!schema) schema = ProductFn.schema;\r\n        if (!schema) return null;\r\n        let node = ProductFn.schema.querySelector(`itemSchema > field[id=\"${id}\"]`);\r\n        if (!node) return null;\r\n        return insideCheck([node])[0];\r\n    } //获取单个字段信息\r\n\r\n    function insideCheck(nodeArr) {\r\n        let newSubArr = [];\r\n        let subArr = Array.from(nodeArr);\r\n        for (let index = 0; index < subArr.length; index++) {\r\n            let xml = subArr[index];\r\n            let subObj = fieldCheck(xml);\r\n            if (!subObj) subObj = {};\r\n            subObj.xml = xml;\r\n            if (subObj.options && subObj.options.length) subObj.options = insideCheck(subObj.options);\r\n            if (subObj.values && subObj.values.length) subObj.values = insideCheck(subObj.values);\r\n            if (xml.innerHTML && !xml.children.length) subObj.value = xml.innerHTML;\r\n            newSubArr.push(subObj);\r\n        }\r\n        return newSubArr;\r\n    } //获取内部数据\r\n\r\n    function generalCheck(node) {\r\n        let attributeObj = node.getAttributeObj();\r\n        if (!attributeObj) attributeObj = {};\r\n        let resultObj = { ...attributeObj, xml: node };\r\n        return resultObj;\r\n    } //获取基本信息\r\n\r\n    function fieldCheck(node) {\r\n        let resultObj = generalCheck(node);\r\n        let { type } = resultObj;\r\n        if (!type) return resultObj;\r\n        let optionNodes;\r\n        let valueNodes;\r\n        if (type === 'multiComplex') {\r\n            optionNodes = node.querySelectorAll('fields > field');\r\n            valueNodes = node.querySelectorAll('complex-values > field');\r\n        } else if (type === 'complex') {\r\n            optionNodes = node.querySelectorAll('fields > field');\r\n            valueNodes = node.querySelectorAll('complex-value > field');\r\n        } else if (type === 'multiCheck') {\r\n            optionNodes = node.querySelectorAll('options > option');\r\n            valueNodes = node.querySelectorAll('values > value');\r\n        } else if (type === 'multiInput') {\r\n            valueNodes = node.querySelectorAll('values > value');\r\n        } else if (type === 'singleCheck') {\r\n            optionNodes = node.querySelectorAll('options > option');\r\n            valueNodes = node.querySelectorAll('value');\r\n        } else if (type === 'input') {\r\n            valueNodes = node.querySelectorAll('value');\r\n        }\r\n        if (optionNodes && optionNodes.length) resultObj.options = optionNodes;\r\n        if (valueNodes && valueNodes.length) resultObj.values = valueNodes;\r\n        return resultObj;\r\n    } //获取选项和值\r\n\r\n    function imageObjMaker(schema) {\r\n        let fieldObj = xmlGetField('scImages', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values\r\n                .map((obj) => {\r\n                    let key = obj.id;\r\n                    let value = obj.values[0].value.replace(/_.*/, ''); //换高清图\r\n                    return { key, value };\r\n                })\r\n                .sort((a, b) => Number(/\\d/.exec(a.key)[0]) - Number(/\\d/.exec(b.key)[0])); //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取产品名称\r\n\r\n    function imageObjChecker(imageObj, valueArr) {\r\n        if (!valueArr.length) return null; //校验\r\n        if (valueArr.length > 6) valueArr.length = 6; //max\r\n        let newObj = { ...imageObj };\r\n        let newArr = valueArr.map((obj, index) => {\r\n            return {\r\n                ...obj,\r\n                key: `scImages_${index}`,\r\n                value: obj.value.replace('https:', '')\r\n            };\r\n        }); //重新编号\r\n        newArr = newArr.filter((obj) => obj.id); // \"fileId必须填写;\" 否则报错\r\n        newObj._values = newArr;\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplates = newField.querySelectorAll('fields > field'); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        newArr.forEach((obj, index) => {\r\n            valueTemplates[index].innerHTML = `<value fileId=\"${obj.id}\">${obj.value}</value>`;\r\n            valueSaver += valueTemplates[index].outerHTML;\r\n        });\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //通知父组件\r\n    } //产品图片修改\r\n\r\n    function productGroupObjMaker(schema) {\r\n        let fieldObj = xmlGetField('productGroup', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].values[0].value }; //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取产品分组\r\n\r\n    function productGroupObjChecker(productGroupObj, value) {\r\n        if (!value) return null; //productGroupNeeded\r\n        let newObj = { ...productGroupObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplate = newField.querySelector('fields > field#first_group_id'); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueTemplate.innerHTML = `<value>${value}</value>`; //填值\r\n        valueSaver += valueTemplate.outerHTML;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //产品分组修改\r\n\r\n    function productTypeObjMaker(schema) {\r\n        let fieldObj = xmlGetField('market', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value }; //数据内部处理\r\n            fieldObj._values.key = fieldObj._options.find((obj) => obj.value === fieldObj._values.value).key;\r\n        }\r\n        return fieldObj;\r\n    } //获取产品类型\r\n\r\n    function productTypeObjChecker(productTypeObj, value) {\r\n        let newObj = { ...productTypeObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //产品类型修改\r\n\r\n    function subjectObjMaker(schema) {\r\n        let fieldObj = xmlGetField('productTitle', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value }; //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取产品名称\r\n\r\n    function subjectObjChecker(subjectObj, value) {\r\n        if (!value || !value.trim()) return null; //productSubjectNeeded\r\n        let newObj = { ...subjectObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //产品名称修改\r\n\r\n    function keywordObjMaker(schema) {\r\n        let fieldObj = xmlGetField('productKeywords', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values.map((obj) => obj.values[0].value).join(',') }; //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取产品关键词\r\n\r\n    function keywordObjChecker(keywordObj, valueArr) {\r\n        if (!valueArr.length) return null; //productKeywordNeeded\r\n        if (valueArr.length > 3) valueArr.length = 3; //productKeywordMax\r\n        let value = valueArr.join(',');\r\n        let newObj = { ...keywordObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplates = newField.querySelectorAll('fields > field'); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueArr.forEach((keyword, index) => {\r\n            valueTemplates[index].innerHTML = `<value>${keyword}</value>`;\r\n            valueSaver += valueTemplates[index].outerHTML;\r\n        });\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //关键词修改\r\n\r\n    function MOQObjMaker(schema) {\r\n        let fieldObj = xmlGetField('minOrderQuantity', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: Number(fieldObj.values[0].value) }; //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取最低起订量\r\n\r\n    function MOQObjChecker(MOQObj, value) {\r\n        let newObj = { ...MOQObj };\r\n        value = Number(value);\r\n        newObj._values = { value };\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //最低起订量修改\r\n\r\n    function paymentMethodObjMaker(schema) {\r\n        let fieldObj = xmlGetField('paymentMethod', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values[0].values.map((obj) => {\r\n                return { value: obj.value };\r\n            });\r\n        }\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options[0].options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        return fieldObj;\r\n    } //获取付款方式\r\n\r\n    function paymentMethodObjChecker(paymentMethodObj, valueArr) {\r\n        if (!valueArr.length) return null; //productPaymentMethodsNeeded\r\n        let newObj = { ...paymentMethodObj };\r\n        newObj._values = valueArr;\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplates = newField.querySelectorAll('fields > field'); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        let predefinedMethodTemplate = valueTemplates[0]; //id=\"predefined_method\"\r\n        let valueStr = '<values>';\r\n        valueArr.forEach((obj) => {\r\n            valueStr += `<value>${obj.value}</value>`;\r\n        });\r\n        valueStr += `</values>`;\r\n        predefinedMethodTemplate.innerHTML = valueStr;\r\n        valueSaver += predefinedMethodTemplate.outerHTML;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //支付方式确认\r\n\r\n    function priceUnitObjMaker(schema) {\r\n        let fieldObj = xmlGetField('priceUnit', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { key: '', value: fieldObj.values[0].value };\r\n            fieldObj._values.key = fieldObj._options.find((obj) => obj.value === fieldObj._values.value).key;\r\n        }\r\n        return fieldObj;\r\n    } //获取计量单位\r\n\r\n    function priceUnitObjChecker(priceUnitObj, valueObj) {\r\n        if (!valueObj) return null; //productPriceUnitNeeded\r\n        let newObj = { ...priceUnitObj };\r\n        newObj._values = valueObj;\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += valueObj.value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //计量单位选择\r\n\r\n    function portObjMaker(schema) {\r\n        let fieldObj = xmlGetField('port', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value }; //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取海运港口\r\n\r\n    function portObjChecker(portObj, value) {\r\n        if (!value || !value.trim()) return null; //productPortNeeded\r\n        let newObj = { ...portObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //海运港口修改\r\n\r\n    function logisticsObjMaker(schema) {\r\n        let fieldObj = xmlGetField('logisticsMode', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values.map((obj) => {\r\n                let { value } = obj;\r\n                let key = fieldObj._options.find((obj) => obj.value === value).key;\r\n                return { key, value };\r\n            });\r\n        }\r\n        return fieldObj;\r\n    } //获取物流模式\r\n\r\n    function logisticsObjChecker(logisticsModeObj, valueArr) {\r\n        if (!valueArr.length) return null; //productLogisticsModeNeeded\r\n        let newObj = { ...logisticsModeObj };\r\n        let valueTagName = `values`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: multiCheck\r\n        let valueStr = '';\r\n        let newArr = valueArr.map((key) => {\r\n            let value = newObj._options.find((obj) => obj.key === key).value;\r\n            return { key, value };\r\n        });\r\n        newArr.forEach((obj) => {\r\n            valueStr += `<value>${obj.value}</value>`;\r\n        });\r\n        valueSaver += valueStr + `</${valueTagName}>`;\r\n        newObj._values = newArr;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //物流模式确认\r\n\r\n    function packaingDescriptionObjMaker(schema) {\r\n        let fieldObj = xmlGetField('wholeSalePkgDesc', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value }; //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取包装方式\r\n\r\n    function packaingDescriptionObjChecker(packagingDescriptionObj, value) {\r\n        if (!value || !value.trim()) return null; //productPackagingDescriptionNeeded\r\n        let newObj = { ...packagingDescriptionObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //包装方式修改\r\n\r\n    function priceObjMaker(schema) {\r\n        let fieldObj = xmlGetField('ladderPrice', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values\r\n                .filter((obj) => obj.type === 'complex')\r\n                .map((obj) => {\r\n                    return { quantity: Number(obj.values[0].values[0].value), price: Number(obj.values[1].values[0].value) };\r\n                })\r\n                .sort((a, b) => a.quantity - b.quantity);\r\n        } else {\r\n            fieldObj._values = [{ quantity: 1, price: 0 }];\r\n        }\r\n        return fieldObj;\r\n    } //获取阶梯价格\r\n\r\n    function priceObjChecker(priceObj, valueArr) {\r\n        let newObj = { ...priceObj };\r\n        let priceArr = valueArr.filter((obj) => obj.price);\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplates = newField.querySelectorAll(`fields > field[type=complex]`); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        priceArr.forEach((obj, i) => {\r\n            valueTemplates[i].querySelector('fields > field#quantity').innerHTML = `<value>${obj.quantity}</value>`;\r\n            valueTemplates[i].querySelector('fields > field#price').innerHTML = `<value>${obj.price}</value>`;\r\n            valueSaver += valueTemplates[i].outerHTML;\r\n        });\r\n        valueSaver += `</${valueTagName}>`;\r\n        valueSaver = valueSaver.replace(/fields/g, valueTagName); //替换\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //阶梯价格修改 & 确认\r\n\r\n    function ladderPeriodObjMaker(schema) {\r\n        let fieldObj = xmlGetField('ladderPeriod', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values\r\n                .filter((obj) => obj.type === 'complex')\r\n                .map((obj) => {\r\n                    return { quantity: Number(obj.values[0].values[0].value), day: Number(obj.values[1].values[0].value) };\r\n                })\r\n                .sort((a, b) => a.quantity - b.quantity);\r\n        } else {\r\n            fieldObj._values = [{ quantity: 1, price: 0 }];\r\n        }\r\n        return fieldObj;\r\n    } //获取发货期\r\n\r\n    function ladderPeriodObjChecker(ladderPeriodObj, valueArr) {\r\n        let newObj = { ...ladderPeriodObj };\r\n        newObj._values = valueArr;\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplates = newField.querySelectorAll(`fields > field[type=complex]`); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueArr.forEach((obj, index) => {\r\n            valueTemplates[index].querySelector('fields > field#quantity').innerHTML = `<value>${obj.quantity}</value>`;\r\n            valueTemplates[index].querySelector('fields > field#day').innerHTML = `<value>${obj.day}</value>`;\r\n            valueSaver += valueTemplates[index].outerHTML;\r\n        });\r\n        valueSaver += `</${valueTagName}>`;\r\n        valueSaver = valueSaver.replace(/fields/g, valueTagName); //替换\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //发货期修改 & 确认\r\n\r\n    function supplyAbilityObjMaker(schema) {\r\n        let fieldObj = xmlGetField('supply', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value }; //数据内部处理\r\n        }\r\n        return fieldObj;\r\n    } //获取产品类型\r\n\r\n    function supplyAbilityObjChecker(supplyAbilityObj, valueObj) {\r\n        if (!valueObj) return null; //productSupplyAbilityNeeded\r\n        let newObj = { ...supplyAbilityObj };\r\n        newObj._values = valueObj;\r\n        let valueTagName = `complex-value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplate = newField.querySelector(`fields`); //引入填写模板\r\n        valueTemplate.querySelector(`field#supply_number`).innerHTML = `<value>${valueObj.supply_number}</value>`;\r\n        valueTemplate.querySelector(`field#time_unit`).innerHTML = `<value>${valueObj.time_unit}</value>`;\r\n        valueTemplate.querySelector(`field#quantity_unit`).innerHTML = `<value>${valueObj.quantity_unit}</value>`;\r\n        let valueTemplates = newField.querySelectorAll(`fields > field`);\r\n        Array.from(valueTemplates).forEach((node) => {\r\n            valueSaver += node.outerHTML;\r\n        });\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //产品类型修改\r\n\r\n    function attributeObjMaker(schema) {\r\n        let fieldObj = xmlGetField('icbuCatProp', schema);\r\n        if (!fieldObj) return null;\r\n        let checkValues = (arr) => {\r\n            if (!arr || !arr.length) return arr;\r\n            let newArr = [];\r\n            arr.forEach((obj) => {\r\n                let newObj = { ...obj };\r\n                let { type, displayName, inputValue, value, values } = newObj;\r\n                if (value !== undefined) {\r\n                    let valueObj = {};\r\n                    if (displayName !== undefined) valueObj.key = displayName;\r\n                    if (inputValue !== undefined) valueObj.key = inputValue;\r\n                    if (value !== undefined) valueObj.value = value;\r\n                    if (Object.keys(valueObj).length) newObj = { ...newObj, ...valueObj };\r\n                } else if (['input', 'singleCheck'].find((str) => str === type)) {\r\n                    let valueObj = {};\r\n                    if (values[0].inputValue !== undefined) valueObj.key = values[0].inputValue;\r\n                    if (values[0].value !== undefined) valueObj.value = values[0].value;\r\n                    if (Object.keys(valueObj).length) newObj._values = valueObj;\r\n                } else {\r\n                    let newValues = checkValues(values);\r\n                    if (newValues) newObj._values = newValues;\r\n                }\r\n                newArr.push(newObj);\r\n            });\r\n            return newArr;\r\n        };\r\n        let checkOptions = (arr) => {\r\n            if (!arr || !arr.length) return arr;\r\n            let newArr = [];\r\n            arr.forEach((obj) => {\r\n                let newObj = { ...obj };\r\n                let { type, options, displayName, inputValue, value } = newObj;\r\n                if (value !== undefined) {\r\n                    let optionObj = {};\r\n                    if (displayName !== undefined) optionObj.key = displayName;\r\n                    if (inputValue !== undefined) optionObj.key = inputValue;\r\n                    if (value !== undefined) optionObj.value = value;\r\n                    if (Object.keys(optionObj).length) newObj = { ...newObj, ...optionObj };\r\n                } else if (/input/gi.test(type)) {\r\n                    newObj._options = false;\r\n                } else {\r\n                    let newOptions = checkOptions(options);\r\n                    if (newOptions) {\r\n                        newObj._options = newOptions;\r\n                    } else {\r\n                        let optionObj = {};\r\n                        if (options && options[0].displayName !== undefined) optionObj.key = options[0].displayName;\r\n                        //if (options && options[0].inputValue !== undefined) optionObj.key = options[0].inputValue;\r\n                        if (options && options[0].value !== undefined) optionObj.value = options[0].value;\r\n                        if (Object.keys(optionObj).length) newObj._options = [optionObj];\r\n                    }\r\n                }\r\n                newArr.push(newObj);\r\n            });\r\n            return newArr;\r\n        };\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values.filter((obj) => obj.name).sort((a, b) => a.type.length - b.type.length);\r\n            fieldObj._values = checkValues(fieldObj._values);\r\n        }\r\n        if (fieldObj.options) {\r\n            fieldObj._options = fieldObj.options.filter((obj) => obj.name).sort((a, b) => a.type.length - b.type.length);\r\n            fieldObj._options = checkOptions(fieldObj._options);\r\n        }\r\n        //console.log(fieldObj);\r\n        return fieldObj;\r\n    } //在用的属性\r\n\r\n    function attributeObjChecker(attributeObj, attributeSaver, cleaner) {\r\n        let newObj = { ...attributeObj }; //make a copy\r\n        let valueArr = newObj._values;\r\n        let saveAttribute = (newObj, cleaner) => {\r\n            let valueArr = newObj._values;\r\n            let invalidList = []; //无效列表\r\n            let valueTagName = `complex-value`;\r\n            let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n            let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n            valueArr.forEach((obj, index) => {\r\n                let { type, id, _values } = obj;\r\n                let valueTemplates = newField.querySelector(`fields > field#${id}`); //引入填写模板\r\n                if (valueTemplates) {\r\n                    valueTemplates.innerHTML = ''; //清空模板\r\n                    if (/multi(?!Complex)/.test(type)) {\r\n                        let valueStr = '';\r\n                        _values.forEach((subObj) => {\r\n                            let { key, value } = subObj;\r\n                            valueStr += `<value inputValue=\"${key}\">${value}</value>`;\r\n                        });\r\n                        let elementValues = document.createElement('values');\r\n                        elementValues.innerHTML = valueStr;\r\n                        if (valueStr) {\r\n                            valueTemplates.innerHTML = elementValues.outerHTML;\r\n                            valueSaver += valueTemplates.outerHTML;\r\n                        } else {\r\n                            invalidList.push(index);\r\n                        }\r\n                    } else {\r\n                        let { key, value } = _values;\r\n                        let elementValue = document.createElement('value');\r\n                        elementValue.setAttribute('inputValue', key);\r\n                        elementValue.innerText = value;\r\n                        const checkContent = (str) => str !== undefined && String(str).trim() !== '' && str !== null; //检查内容是否为空\r\n                        if (checkContent(key)) {\r\n                            valueTemplates.innerHTML = elementValue.outerHTML;\r\n                            valueSaver += valueTemplates.outerHTML;\r\n                        } else {\r\n                            invalidList.push(index);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            valueSaver += `</${valueTagName}>`;\r\n            if (invalidList.length && cleaner) newObj._values = valueArr.filter((obj, index) => !invalidList.find((i) => i === index));\r\n            if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n            let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n            newObj.xml.append(newXml); //替换\r\n            return newObj; //更新到JSX\r\n        };\r\n        if (cleaner) return saveAttribute(newObj, cleaner);\r\n        let [mainAttributeObj, value] = attributeSaver;\r\n        // need to find the main attribute option first (by id),\r\n        //and then map the data with options(if any),\r\n        //  and then update to the main attribute\r\n        let { id, type, _values } = mainAttributeObj; //multicheck, singlecheck, input\r\n        let myOptions = attributeObj._options.find((option) => option.id === id); //找到当前属性下的选项\r\n        if (/multi(?!Complex)/.test(type)) {\r\n            _values = [];\r\n            value.forEach((str) => {\r\n                if (myOptions._options) {\r\n                    let subOptionObj = myOptions._options.find((subOption) => subOption.key === str); //options are mapped with names\r\n                    if (subOptionObj) _values.push(subOptionObj);\r\n                    //find the mapping, and save the data\r\n                    else _values.push({ key: '', value: str }); //worst situation ( no matches found)\r\n                } else {\r\n                    _values.push({ key: '', value: str }); //worst situation ( no matches found)\r\n                }\r\n            }); //然后再映射属性选项\r\n        } else {\r\n            if (myOptions._options) {\r\n                let subOptionObj = myOptions._options.find((subOption) => subOption.key === value); //options are mapped with names\r\n                if (subOptionObj) _values = subOptionObj;\r\n                //find the mapping, and save the data\r\n                else _values = { key: value, value: '' }; //worst situation ( no matches found)\r\n            } else {\r\n                _values.key = value; //worst situation ( no matches found)\r\n            } //然后再映射属性选项\r\n        }\r\n        mainAttributeObj._values = _values;\r\n        valueArr = valueArr.filter((obj) => obj.id !== id); //过滤旧属性\r\n        valueArr.push(mainAttributeObj);\r\n        newObj._values = valueArr;\r\n        newObj = saveAttribute(newObj);\r\n        return newObj;\r\n    } //属性修改\r\n\r\n    function customStatusObjMaker(schema) {\r\n        let fieldObj = xmlGetField('productLightCustom', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value }; //数据内部处理\r\n            fieldObj._values.key = fieldObj._options.find((obj) => obj.value === fieldObj._values.value).key;\r\n        } else {\r\n            fieldObj._values = {};\r\n        }\r\n        return fieldObj;\r\n    } //获取定制服务支持状态\r\n\r\n    function customStatusObjChecker(customStatusObj, value) {\r\n        if (!value || !value.trim()) return null; //productCustomizationNeeded\r\n        let newObj = { ...customStatusObj };\r\n        let valueTagName = 'value';\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //通知父组件\r\n    } //定制服务支持状态修改\r\n\r\n    function customObjMaker(schema) {\r\n        let fieldObj = xmlGetField('customizedServices', schema);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values\r\n                .filter((obj) => obj.type === 'complex')\r\n                .map((obj) => {\r\n                    return { key: obj.values[1].values[0].value, value: Number(obj.values[0].values[0].value) };\r\n                });\r\n        }\r\n        let optionArr = fieldObj.options.filter((obj) => obj.type === 'complex');\r\n        if (optionArr.length) {\r\n            fieldObj._options = optionArr[0].options[1].options\r\n                .filter((obj) => obj.value !== '-1') //排除 displayName: \"other\" 不太用;\r\n                .map((obj) => {\r\n                    return { ...obj, key: obj.displayName, value: obj.value };\r\n                });\r\n        } //数据内部处理\r\n        //console.log(fieldObj);\r\n        return fieldObj;\r\n    } //获取定制内容\r\n\r\n    function customObjChecker(customObj, valueObj) {\r\n        let newObj = { ...customObj };\r\n        let valueArr = newObj._values.filter((obj) => obj.key !== valueObj.key);\r\n        valueArr = valueArr.filter((obj) => obj.value);\r\n        valueArr = valueArr.filter((obj) => !isNaN(obj.value));\r\n        valueArr.push(valueObj);\r\n        newObj._values = valueArr;\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplates = newField.querySelectorAll(`fields > field[type=complex]`); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueArr.forEach((obj, index) => {\r\n            valueTemplates[index].querySelector('fields > field#custom_type').innerHTML = `<value>${obj.key}</value>`;\r\n            valueTemplates[index].querySelector('fields > field#quantity').innerHTML = `<value>${obj.value}</value>`;\r\n            valueSaver += valueTemplates[index].outerHTML;\r\n        });\r\n        valueSaver += `</${valueTagName}>`;\r\n        valueSaver = valueSaver.replace(/fields/g, valueTagName); //替换\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //确认定制项\r\n\r\n    function shippingTemplateObjMaker(schema) {\r\n        let fieldObj = xmlGetField('shippingTemplateId', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value }; //数据内部处理\r\n            fieldObj._values.key = fieldObj._options.find((obj) => obj.value === fieldObj._values.value).key;\r\n        }\r\n        return fieldObj;\r\n    } //获取运费模板\r\n\r\n    function shippingTemplateObjChecker(shippingTemplateObj, valueObj) {\r\n        if (!valueObj) return null; //productSubjectNeeded\r\n        let newObj = { ...shippingTemplateObj };\r\n        newObj._values = valueObj;\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += valueObj.value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //运费模板修改\r\n\r\n    function weightObjMaker(schema) {\r\n        let fieldObj = xmlGetField('pkgWeight', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value };\r\n        }\r\n        return fieldObj;\r\n    } //获取毛重\r\n\r\n    function weightObjChecker(weightObj, value) {\r\n        if (!value) return null; //productWeightNeeded\r\n        let newObj = { ...weightObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //毛重修改\r\n\r\n    function measureObjMaker(schema) {\r\n        let fieldObj = xmlGetField('pkgMeasure', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = fieldObj.values.map((obj) => {\r\n                return { key: obj.id, value: obj.values[0].value };\r\n            });\r\n            let ranking = ['length', 'width', 'height'];\r\n            fieldObj._values.sort((a, b) => {\r\n                return ranking.indexOf(a.key) - ranking.indexOf(b.key);\r\n            });\r\n        }\r\n        return fieldObj;\r\n    } //获取长宽高\r\n\r\n    function measureObjChecker(measureObj, value) {\r\n        if (!value) return null; //productMeasureNeeded);\r\n        let arr = value.split('*');\r\n        if (arr.length < 3) return null; //productMeasureNeeded);\r\n        let hasError = false;\r\n        arr.forEach((num) => {\r\n            if (!num || isNaN(num)) hasError = true;\r\n        });\r\n        if (hasError) return null; //productMeasureNeeded);\r\n        let newObj = { ...measureObj };\r\n        let keyArr = ['length', 'width', 'height'];\r\n        newObj._values = arr.map((obj, index) => {\r\n            return { key: keyArr[index], value: Number(obj) };\r\n        });\r\n        let valueTagName = `complex-value`;\r\n        let newField = new DOMParser().parseFromString(newObj.xml.outerHTML, 'text/xml').firstChild; //引入模板\r\n        let valueTemplates = newField.querySelectorAll('fields > field'); //引入填写模板\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        let allValueTemplates = Array.from(valueTemplates);\r\n        allValueTemplates.find((node) => node.id === 'length').innerHTML = `<value>${newObj._values[0].value}</value>`;\r\n        allValueTemplates.find((node) => node.id === 'width').innerHTML = `<value>${newObj._values[1].value}</value>`;\r\n        allValueTemplates.find((node) => node.id === 'height').innerHTML = `<value>${newObj._values[2].value}</value>`;\r\n        allValueTemplates.forEach((node) => {\r\n            valueSaver += node.outerHTML;\r\n        });\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //长宽高确认\r\n\r\n    function saleTypeObjMaker(schema) {\r\n        let fieldObj = xmlGetField('saleType', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { key: '', value: fieldObj.values[0].value };\r\n            fieldObj._values.key = fieldObj._options.find((obj) => obj.value === fieldObj._values.value).key;\r\n        }\r\n        return fieldObj;\r\n    } //获取销售方式\r\n\r\n    function saleTypeObjChecker(saleTypeObj, valueObj) {\r\n        if (!valueObj) return null; //productTypeNeeded\r\n        let newObj = { ...saleTypeObj };\r\n        newObj._values = valueObj;\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += valueObj.value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //销售方式确认\r\n\r\n    function batchObjMaker(schema) {\r\n        let fieldObj = xmlGetField('batchNum', schema);\r\n        //console.log(fieldObj);\r\n        if (!fieldObj) return null;\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: fieldObj.values[0].value };\r\n        }\r\n        return fieldObj;\r\n    } //获取一批等于\r\n\r\n    function batchObjChecker(batchObj, value) {\r\n        if (!value) return null; //productWeightNeeded\r\n        let newObj = { ...batchObj };\r\n        newObj._values = { value };\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        if (newObj.xml.querySelector(valueTagName)) newObj.xml.querySelector(valueTagName).remove(); //删除前值\r\n        let newXml = new DOMParser().parseFromString(valueSaver, 'text/xml').firstChild; //合并\r\n        newObj.xml.append(newXml); //替换\r\n        return newObj; //更新到JSX\r\n    } //一批等于确认\r\n\r\n    function descriptionObjMaker(schema) {\r\n        let fieldObj = xmlGetField('superText', schema);\r\n        //console.log(fieldObj);\r\n        if (fieldObj.values) {\r\n            fieldObj._values = { value: String(fieldObj.values[0].value).decodeHTMLEntity() }; //数据内部处理\r\n        } else {\r\n            fieldObj._values = { value: '' };\r\n        }\r\n        return fieldObj;\r\n    } //获取产品详情\r\n\r\n    function descriptionObjChecker(descriptionObj, value) {\r\n        if (!value || !value.trim()) return null;\r\n        if (value === descriptionObj._values.value) return null; //未修改\r\n        value = value.replace(/\\n/g, '').trim();\r\n        let valueSaver = value.trim().encodeNonASCII();\r\n        if (valueSaver.length > 50000) return null; //descriptionOverflow\r\n        let newObj = { ...descriptionObj };\r\n        newObj._values = { value };\r\n        newObj.xml.innerHTML = ''; //删除前值\r\n        newObj.xml.append(document.createElement('value'));\r\n        newObj.xml.children[0].innerText = valueSaver;\r\n        return newObj; //更新到JSX\r\n    } //产品名称修改\r\n\r\n    function descriptionTypeObjMaker(schema) {\r\n        let fieldObj = xmlGetField('productDescType', schema);\r\n        fieldObj._options = fieldObj.options\r\n            ? fieldObj.options.map((obj) => {\r\n                  return { key: obj.displayName, value: obj.value };\r\n              })\r\n            : []; //数据内部处理\r\n        let value = fieldObj.values ? fieldObj.values[0].value : '2';\r\n        if (fieldObj._options.find((obj) => obj.value === value)) {\r\n            let key = fieldObj._options.find((obj) => obj.value === value).key;\r\n            fieldObj._values = { key, value };\r\n        }\r\n        //console.log(fieldObj);\r\n        return fieldObj;\r\n    } //获取产品详情描述类型\r\n\r\n    function descriptionTypeObjChecker(descriptionTypeObj, value) {\r\n        let newObj = { ...descriptionTypeObj };\r\n        if (newObj._options.find((obj) => obj.value === value)) {\r\n            newObj._values = { key: newObj._options.find((obj) => obj.value === value).key, value };\r\n        }\r\n        let valueTagName = `value`;\r\n        let valueSaver = `<${valueTagName}>`; //引入填值区域(因类型而异) //type: input\r\n        valueSaver += value;\r\n        valueSaver += `</${valueTagName}>`;\r\n        newObj.xml.innerHTML = valueSaver.trim().decodeHTMLEntity(); //删除前值\r\n        return newObj; //更新到JSX\r\n    } //产品详情描述类型修改\r\n\r\n    return {\r\n        schemaSubmit,\r\n        schemaChecker,\r\n        schemaMaker,\r\n        xmlGetField,\r\n        imageObjMaker,\r\n        imageObjChecker,\r\n        productGroupObjMaker,\r\n        productGroupObjChecker,\r\n        productTypeObjMaker,\r\n        productTypeObjChecker,\r\n        subjectObjMaker,\r\n        subjectObjChecker,\r\n        keywordObjMaker,\r\n        keywordObjChecker,\r\n        MOQObjMaker,\r\n        MOQObjChecker,\r\n        paymentMethodObjMaker,\r\n        paymentMethodObjChecker,\r\n        priceUnitObjMaker,\r\n        priceUnitObjChecker,\r\n        portObjMaker,\r\n        portObjChecker,\r\n        logisticsObjMaker,\r\n        logisticsObjChecker,\r\n        packaingDescriptionObjMaker,\r\n        packaingDescriptionObjChecker,\r\n        priceObjMaker,\r\n        priceObjChecker,\r\n        ladderPeriodObjMaker,\r\n        ladderPeriodObjChecker,\r\n        supplyAbilityObjMaker,\r\n        supplyAbilityObjChecker,\r\n        attributeObjMaker,\r\n        attributeObjChecker,\r\n        customStatusObjMaker,\r\n        customStatusObjChecker,\r\n        customObjMaker,\r\n        customObjChecker,\r\n        shippingTemplateObjMaker,\r\n        shippingTemplateObjChecker,\r\n        weightObjMaker,\r\n        weightObjChecker,\r\n        measureObjMaker,\r\n        measureObjChecker,\r\n        saleTypeObjMaker,\r\n        saleTypeObjChecker,\r\n        batchObjMaker,\r\n        batchObjChecker,\r\n        descriptionObjMaker,\r\n        descriptionObjChecker,\r\n        descriptionTypeObjMaker,\r\n        descriptionTypeObjChecker\r\n    };\r\n})();\r\n\r\nexport default ProductFn;\r\n","import { useNavigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Button, Divider, Typography, List, ListItem } from '@mui/material';\r\nimport { Check as CheckIcon, Cancel as CancelIcon } from '@mui/icons-material';\r\n\r\nfunction Confirmation({ langPack, productModified, showDetails, modificationSubmission }) {\r\n    let navigate = useNavigate(); //react-router-dom\r\n    let modifiedKeys = Object.keys(productModified);\r\n    return (\r\n        <>\r\n            {showDetails ? (\r\n                modifiedKeys.length ? (\r\n                    <>\r\n                        <Typography variant=\"h3\">{langPack.steps.modificationDone}</Typography>\r\n                        <List>\r\n                            {modifiedKeys.map((key) => (\r\n                                <ListItem key={key}>--{key}</ListItem>\r\n                            ))}\r\n                        </List>\r\n                        <Divider />\r\n                    </>\r\n                ) : (\r\n                    <Typography variant=\"h3\">{langPack.steps.modificationNull}</Typography>\r\n                )\r\n            ) : (\r\n                <></>\r\n            )}\r\n            <br />\r\n            <div>\r\n                <Button startIcon={<CheckIcon />} onClick={modificationSubmission}>\r\n                    {langPack.common.yes}\r\n                </Button>\r\n                <Button startIcon={<CancelIcon />} onClick={() => navigate(`/product`)}>\r\n                    {langPack.common.no}\r\n                </Button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nConfirmation.propTypes = {\r\n    langPack: PropTypes.object,\r\n    productModified: PropTypes.object,\r\n    showDetails: PropTypes.bool,\r\n    modificationSubmission: PropTypes.func\r\n};\r\n\r\nexport default Confirmation;\r\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getFormGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiFormGroup', slot);\n}\nconst formGroupClasses = generateUtilityClasses('MuiFormGroup', ['root', 'row', 'error']);\nexport default formGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"row\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getFormGroupUtilityClass } from './formGroupClasses';\nimport useFormControl from '../FormControl/useFormControl';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    row,\n    error\n  } = ownerState;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getFormGroupUtilityClass, classes);\n};\n\nconst FormGroupRoot = styled('div', {\n  name: 'MuiFormGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.row && styles.row];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  flexDirection: 'column',\n  flexWrap: 'wrap'\n}, ownerState.row && {\n  flexDirection: 'row'\n}));\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\n\nconst FormGroup = /*#__PURE__*/React.forwardRef(function FormGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormGroup'\n  });\n\n  const {\n    className,\n    row = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n\n  const ownerState = _extends({}, props, {\n    row,\n    error: fcs.error\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormGroupRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display group of elements in a compact row.\n   * @default false\n   */\n  row: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default FormGroup;","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n}), 'Favorite');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"\n}), 'Home');","var grey = {\n  50: '#fafafa',\n  100: '#f5f5f5',\n  200: '#eeeeee',\n  300: '#e0e0e0',\n  400: '#bdbdbd',\n  500: '#9e9e9e',\n  600: '#757575',\n  700: '#616161',\n  800: '#424242',\n  900: '#212121',\n  A100: '#d5d5d5',\n  A200: '#aaaaaa',\n  A400: '#303030',\n  A700: '#616161'\n};\nexport default grey;","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Menu, MenuItem, Breadcrumbs, Chip } from '@mui/material';\r\nimport { Home as HomeIcon, ExpandMore as ExpandMoreIcon } from '@mui/icons-material';\r\nimport { emphasize, styled } from '@mui/material/styles';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\n//styled components\r\nconst BreadChip = styled(Chip)(() => {\r\n    const backgroundColor = grey[100];\r\n    return {\r\n        backgroundColor,\r\n        height: 40,\r\n        '&:hover, &:focus': {\r\n            backgroundColor: emphasize(backgroundColor, 0.06)\r\n        },\r\n        '&:active': {\r\n            boxShadow: 10,\r\n            backgroundColor: emphasize(backgroundColor, 0.12)\r\n        }\r\n    };\r\n});\r\n\r\nfunction ProductCategory({ localization, categories, menuRef, menuState, showMenu, closeMenu }) {\r\n    //console.log('loading product category...');\r\n    let { menuArr, anchorEl } = menuState;\r\n    return (\r\n        <>\r\n            <Breadcrumbs sx={{ display: 'inline-flex', paddingTop: '10px' }}>\r\n                {categories.map((obj, index) => {\r\n                    if (index > 0)\r\n                        return (\r\n                            <BreadChip\r\n                                sx={menuState.menuLevel === index ? { display: 'none' } : {}}\r\n                                component=\"a\"\r\n                                href=\"#\"\r\n                                key={obj.category_id}\r\n                                label={localization.locale !== 'zhCN' ? obj.name : obj.cn_name}\r\n                                icon={index === 1 ? <HomeIcon /> : undefined}\r\n                                deleteIcon={<ExpandMoreIcon />}\r\n                                onDelete={() => showMenu(index)}\r\n                                onClick={() => showMenu(index)}\r\n                            />\r\n                        );\r\n                })}\r\n            </Breadcrumbs>\r\n            <span ref={menuRef}></span>\r\n            <div>\r\n                <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={() => closeMenu()}>\r\n                    {menuArr.map((obj) => (\r\n                        <MenuItem key={obj.category_id} onClick={() => closeMenu(obj.category_id)}>\r\n                            {localization.locale !== 'zhCN' ? obj.name : obj.cn_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nProductCategory.propTypes = {\r\n    localization: PropTypes.object,\r\n    finalImageArr: PropTypes.array,\r\n    menuRef: PropTypes.object,\r\n    categories: PropTypes.array,\r\n    menuState: PropTypes.object,\r\n    showMenu: PropTypes.func,\r\n    closeMenu: PropTypes.func\r\n};\r\n\r\nexport default ProductCategory;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 20H4v-4h4v4zm0-6H4v-4h4v4zm0-6H4V4h4v4zm6 12h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4zm6 12h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z\"\n}), 'GridOn');","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect, useRef, lazy } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Loadable from 'ui-component/Loadable';\r\n\r\n// project imports\r\nimport ProductTable from './ProductTable';\r\nimport productFn from './productFn'; //functions\r\nconst PhotoSelector = Loadable(lazy(() => import('./PhotoSelector')));\r\nconst ProductSelector = Loadable(lazy(() => import('./ProductSelector')));\r\n\r\n// material-ui\r\nimport { Button, FormGroup, FormControlLabel, Input, Tooltip, Typography, TextField, Checkbox, Autocomplete, Chip } from '@mui/material';\r\nimport { GridOn as GridOnIcon, Check as CheckIcon, Cancel as CancelIcon, CloudQueue as CloudQueueIcon } from '@mui/icons-material';\r\n\r\nconst ProductUpload = ({ langPack, localization, categoryId, groupId, referredRealProductId, rtsProduct }) => {\r\n    console.log('product upload running');\r\n\r\n    //data grid 相关\r\n    let [tableColumns, setTableColumns] = useState(columnFormatter());\r\n    let [tableRows, setTableRows] = useState(getSheetExample());\r\n    let [columnVisibilityModel, setColumnVisibilityModel] = useState({});\r\n    let [loadingProgress, setLoadingProgress] = useState(100); //loading\r\n    let [page, setPage] = useState(0);\r\n    let [page_size, setPage_size] = useState(10);\r\n    let [total, setTotal] = useState(0);\r\n    let [sheetRowSelected, setSheetRowSelected] = useState([]);\r\n\r\n    //选择图片相关\r\n    let [photoDialogOpen, setPhotoDialogOpen] = useState(false); //选择图片的对话框状态\r\n\r\n    //选择模板相关\r\n    let [productDialogOpen, setProductDialogOpen] = useState(false); //选择模板的对话框状态\r\n    let [productTemplateSchema, setProductTemplateSchema] = useState(''); //发品模板\r\n    let [showKeys, setShowKeys] = useState(false); //选择模板的对话框状态\r\n    let [allKeyArr, setAllKeyArr] = useState([]); //所有的key\r\n    let [usedKeyArr, setUsedKeyArr] = useState([]); //共享的发品key\r\n\r\n    //表格文件相关\r\n    let _sheetFile; //表格文件\r\n    let uploaderRef = useRef(null); //上传选择\r\n\r\n    useEffect(() => {\r\n        if (!categoryId) return;\r\n        makeProductInfo({ cat_id: categoryId }); //会写入schema到productFn里暂存\r\n        return; //类目选择\r\n    }, [categoryId]);\r\n\r\n    useEffect(() => {\r\n        if (!productTemplateSchema) return;\r\n        console.log('new template found');\r\n        let obj = productTemplateSchema.children[0].toObject();\r\n        if (!obj) return;\r\n        let arr = obj.field.map((subObj) => {\r\n            let { id, name } = subObj;\r\n            return { id, name };\r\n        });\r\n        arr = arr.filter((obj) => obj.name);\r\n        arr = arr.filter((obj) => obj.id !== 'infos');\r\n        arr = arr.filter((obj) => obj.id !== 'ApiPostLevelAttrAdapter');\r\n        let newObj = {};\r\n        arr.forEach((subObj) => (newObj[subObj.name.trim()] = subObj));\r\n        arr = Array.from(Object.values(newObj));\r\n        setAllKeyArr(arr);\r\n        setShowKeys(true); //打开对话框\r\n        return; //共享信息选择\r\n    }, [productTemplateSchema]);\r\n\r\n    //____________通用\r\n    async function makeProductInfo(obj) {\r\n        let paramObj = ma.productSchemaQuery({\r\n            param_product_top_publish_request: JSON.stringify({\r\n                ...obj,\r\n                language: localization.locale === 'enUS' ? 'en_US' : 'zh'\r\n            })\r\n        });\r\n        let msg = await fetchAPI(paramObj);\r\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\r\n        let res = ma.productSchemaCheck(msg);\r\n        let { status, result } = res.response;\r\n        if (!status) return queryResult(status, result);\r\n        let schemaResult = productFn.schemaMaker(result);\r\n        if (!schemaResult) return queryResult(false, langPack.steps.uneditable);\r\n        //console.log(schemaResult);\r\n    } //获取新产品 编辑模板\r\n    //👆二选一👇\r\n    async function makeProductExample(obj) {\r\n        let paramObj = ma.productSchemaRenderQuery({\r\n            param_product_top_publish_request: JSON.stringify({\r\n                ...obj,\r\n                language: localization.locale === 'enUS' ? 'en_US' : 'zh'\r\n            })\r\n        });\r\n        let msg = await fetchAPI(paramObj);\r\n        if (!msg.response.status) return queryResult(false, msg.response.result);\r\n        let res = ma.productSchemaRenderCheck(msg);\r\n        let { status, result } = res.response;\r\n        if (!status) return queryResult(status, result);\r\n        let schemaResult = productFn.schemaMaker(result, true); //纯函数\r\n        if (!schemaResult) return queryResult(false, langPack.steps.uneditable);\r\n        setProductTemplateSchema(schemaResult);\r\n    } //获取 现有产品信息  &  编辑模板\r\n\r\n    function needSheet() {\r\n        uploaderRef.current.click();\r\n    } //打开图库\r\n\r\n    function onFileSelected(e) {\r\n        _sheetFile = null;\r\n        let files = e.target.files;\r\n        if (files && files.length) {\r\n            for (let i = 0; i < files.length; i++) {\r\n                if (files[i].size > 1 * 1000 * 1000) {\r\n                    return queryResult(false, '文件大小不能超过1M');\r\n                }\r\n                _sheetFile = files[i];\r\n                //console.log(_sheetFile);\r\n                return fileRead(e);\r\n            }\r\n        }\r\n    } //文件选择\r\n\r\n    async function fileRead(e) {\r\n        let res = await _sheetFile.text();\r\n        let sheetRows = res.split(/\\r\\n/g);\r\n        let headerArr = [];\r\n        let bodyArr = [];\r\n        if (sheetRows.length > 1) {\r\n            let row = sheetRows[0].split(/,/g);\r\n            let rowArr = [];\r\n            let allHeaderArr = columnFormatter();\r\n            for (let index = 0; index < row.length; index++) {\r\n                let text = row[index].trim();\r\n                let headerObj = allHeaderArr.find((obj) => obj.headerName == text);\r\n                if (!headerObj) return queryResult(false, langPack.steps.columnNotFound);\r\n                rowArr.push(headerObj.field);\r\n            }\r\n            headerArr = rowArr;\r\n        } //读取表 head\r\n        let rowLengthCheck;\r\n        for (let i = 1; i < sheetRows.length; i++) {\r\n            let row = sheetRows[i].split(/,/g);\r\n            if (rowLengthCheck !== undefined) {\r\n                if (row.length !== rowLengthCheck || row.length != headerArr.length) {\r\n                    e.target.value = '';\r\n                    return queryResult(false, langPack.steps.bulkUploadSheetMalformed);\r\n                }\r\n                rowLengthCheck = row.length;\r\n            }\r\n            if (row.length === 1) {\r\n                break; //过滤空行\r\n            }\r\n            let rowObj = { id: i - 1 };\r\n            for (let index = 0; index < row.length; index++) {\r\n                let text = row[index].trim();\r\n                rowObj[headerArr[index]] = text;\r\n            }\r\n            bodyArr.push(rowObj);\r\n        } //读取表 body\r\n        console.log('file change', headerArr, bodyArr);\r\n        setTotal(bodyArr.length);\r\n        setTableRows(bodyArr);\r\n        return;\r\n    } //文件读取\r\n\r\n    const needPost = async (productArr) => {\r\n        console.log('need upload', productArr);\r\n        if (!productArr.length) return queryResult(false, langPack.steps.productSheetEmpty);\r\n        if (!categoryId) return queryResult(false, langPack.steps.productCategoryNeeded);\r\n        setLoadingProgress(0);\r\n        let count = 0;\r\n        for (let productObj of productArr) {\r\n            let postResult = await postProduct(productObj);\r\n            console.log(postResult);\r\n            count++;\r\n            setLoadingProgress((count / productArr.length) * 100);\r\n            await sleep(3000);\r\n        }\r\n    }; //需要上传？\r\n\r\n    async function postProduct(productObj) {\r\n        console.log('start posting...');\r\n        let requiredArr = ['subject', 'keyword_1', 'imageArr']; //必填字段\r\n        let sharedArr = usedKeyArr.length ? usedKeyArr.map((str) => allKeyArr.find((obj) => obj.name == str).id) : []; //所需的共享字段\r\n        if (requiredArr.find((str) => !productObj[str])) return queryResult(false, langPack.steps.keyAttributeMissing);\r\n        let {\r\n            imageArr,\r\n            subject,\r\n            keyword_1,\r\n            keyword_2,\r\n            keyword_3,\r\n            payment_methods,\r\n            unit_type,\r\n            logistic_mode,\r\n            shipping_port,\r\n            packaging_description\r\n        } = productObj;\r\n        let newProductObj = {};\r\n        if (imageArr && imageArr.length) {\r\n            let baseObj = productFn.imageObjMaker();\r\n            let valueArr = imageArr;\r\n            let newObj = productFn.imageObjChecker(baseObj, valueArr);\r\n            newProductObj['scImages'] = newObj;\r\n        }\r\n        if (subject) {\r\n            let baseObj = productFn.subjectObjMaker();\r\n            let value = subject;\r\n            let newObj = productFn.subjectObjChecker(baseObj, value);\r\n            newProductObj['productTitle'] = newObj;\r\n        }\r\n        if (keyword_1) {\r\n            let baseObj = productFn.keywordObjMaker();\r\n            let valueArr = [keyword_1, keyword_2, keyword_3];\r\n            valueArr = valueArr.filter((str) => str);\r\n            let newObj = productFn.keywordObjChecker(baseObj, valueArr);\r\n            newProductObj['productKeywords'] = newObj;\r\n        }\r\n        if (payment_methods) {\r\n            let baseObj = productFn.paymentMethodObjMaker();\r\n            let valueArr = [{ value: payment_methods }];\r\n            let newObj = productFn.paymentMethodObjChecker(baseObj, valueArr);\r\n            newProductObj['paymentMethod'] = newObj;\r\n        }\r\n        if (unit_type) {\r\n            let baseObj = productFn.priceUnitObjMaker();\r\n            let valueOption = baseObj._options.find((obj) => new RegExp(unit_type, 'gi').test(obj.key));\r\n            if (!valueOption) return queryResult(false, langPack.steps.productPriceUnitNeeded);\r\n            let valueObj = { value: valueOption.value };\r\n            let newObj = productFn.priceUnitObjChecker(baseObj, valueObj);\r\n            newProductObj['priceUnit'] = newObj;\r\n        }\r\n        if (logistic_mode) {\r\n            let baseObj = productFn.logisticsObjMaker();\r\n            let valueOption = baseObj._options.find((obj) => new RegExp(logistic_mode, 'gi').test(obj.key));\r\n            let valueArr = valueOption ? [valueOption] : baseObj._options;\r\n            valueArr = valueArr.map((obj) => obj.key);\r\n            let newObj = productFn.logisticsObjChecker(baseObj, valueArr);\r\n            newProductObj['logisticsMode'] = newObj;\r\n        }\r\n        if (shipping_port) {\r\n            let baseObj = productFn.portObjMaker();\r\n            let value = shipping_port;\r\n            let newObj = productFn.portObjChecker(baseObj, value);\r\n            newProductObj['port'] = newObj;\r\n        }\r\n        if (packaging_description) {\r\n            let baseObj = productFn.packaingDescriptionObjMaker();\r\n            let value = packaging_description;\r\n            let newObj = productFn.packaingDescriptionObjChecker(baseObj, value);\r\n            newProductObj['wholeSalePkgDesc'] = newObj;\r\n        }\r\n        if (groupId) {\r\n            let baseObj = productFn.productGroupObjMaker();\r\n            let value = groupId;\r\n            let newObj = productFn.productGroupObjChecker(baseObj, value);\r\n            newProductObj['productGroup'] = newObj;\r\n        }\r\n        if (rtsProduct) {\r\n            let baseObj = productFn.productTypeObjMaker();\r\n            let value = rtsProduct ? '1' : '2';\r\n            let newObj = productFn.productTypeObjChecker(baseObj, value);\r\n            newProductObj['market'] = newObj;\r\n        }\r\n        //其他一些在表格里还未定义的字段\r\n        for (let id of sharedArr) {\r\n            if (!newProductObj[id]) {\r\n                newProductObj[id] = { id, xml: productTemplateSchema.children[0].querySelector(`field#${id}`) };\r\n            }\r\n        }\r\n        console.log(newProductObj);\r\n        let editMode = 'add';\r\n        let xmlString = productFn.schemaChecker(newProductObj);\r\n        if (!xmlString) return queryResult(false, langPack.steps.modificationNull);\r\n        let res = await productFn.schemaSubmit(xmlString, editMode, null, categoryId, localization.locale);\r\n        if (!res || !res.response.status) return queryResult(false, langPack.common.netFail + '\\n' + res ? res.response.result : '');\r\n        queryResult(true, editMode === 'add' ? langPack.steps.addSuccess : langPack.steps.updateSuccess);\r\n        return true;\r\n        //增加一些默认值\r\n        //以及产品分组和类目\r\n    }\r\n\r\n    //____________ 发品表格\r\n    let productTableFn = { needPhoto, needSheet, needPost, needTemplate };\r\n\r\n    const onTableSelection = (selectedProductArr) => {\r\n        console.log(selectedProductArr.length + ' selected');\r\n        return;\r\n    }; // 选择产品\r\n\r\n    function getSheetExample() {\r\n        return [\r\n            {\r\n                id: 0,\r\n                imageArr: '',\r\n                subject: 'banana',\r\n                keyword_1: 'fresh banana',\r\n                keyword_2: 'Cavendish banana',\r\n                keyword_3: 'Filipino banana',\r\n                payment_methods: 'T/T',\r\n                unit_type: 'piece',\r\n                logistic_mode: 'sea',\r\n                shipping_port: 'Manila',\r\n                packaging_description: 'wrapped with carton'\r\n            },\r\n            {\r\n                id: 1,\r\n                imageArr: '',\r\n                subject: 'strawberry',\r\n                keyword_1: 'fresh strawberry',\r\n                keyword_2: 'red strawberry',\r\n                keyword_3: 'Spanish strawberry',\r\n                payment_methods: 'L/C',\r\n                unit_type: 'Kilogram',\r\n                logistic_mode: 'sea',\r\n                shipping_port: 'Vancouver',\r\n                packaging_description: '10KG / box'\r\n            }\r\n        ];\r\n    }\r\n\r\n    function columnFormatter(obj) {\r\n        const columns = [\r\n            {\r\n                field: 'imageArr',\r\n                headerName: langPack.table.photos,\r\n                disableExport: true,\r\n                minWidth: 50,\r\n                valueGetter: ({ row }) => row,\r\n                valueFormatter: ({ value }) => value,\r\n                renderCell: ({ value }) =>\r\n                    value.imageArr && value.imageArr.length ? (\r\n                        <img src={value.imageArr[0].url} style={{ width: '93%' }} alt=\"mainPic\" />\r\n                    ) : (\r\n                        <CloudQueueIcon />\r\n                    )\r\n            },\r\n            {\r\n                field: 'subject',\r\n                editable: true,\r\n                headerName: langPack.table.subject\r\n            },\r\n            {\r\n                field: 'keyword_1',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.keyword1\r\n            },\r\n            {\r\n                field: 'keyword_2',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.keyword2\r\n            },\r\n            {\r\n                field: 'keyword_3',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.keyword3\r\n            },\r\n            {\r\n                field: 'payment_methods',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.payment_methods\r\n            },\r\n            {\r\n                field: 'unit_type',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.unit_type\r\n            },\r\n            {\r\n                field: 'logistic_mode',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.logistic_mode\r\n            },\r\n            {\r\n                field: 'shipping_port',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.shipping_port\r\n            },\r\n            {\r\n                field: 'packaging_description',\r\n                editable: true,\r\n                flex: 0.5,\r\n                headerName: langPack.table.packaging_description\r\n            }\r\n        ];\r\n        if (obj) {\r\n        }\r\n        return columns;\r\n    } //表格列定义\r\n\r\n    const handleChangePage = (newPage) => {\r\n        setPage(newPage);\r\n    }; //翻页\r\n\r\n    const handleChangeRowsPerPage = (newSize) => {\r\n        setPage_size(newSize);\r\n    }; //页面大小调整\r\n\r\n    const onRowClick = (obj, e) => {\r\n        // let { id, row } = obj;\r\n    }; //单元格点击\r\n\r\n    //____________ 图库选择\r\n    function needPhoto(rowSelected) {\r\n        console.log('needPhoto', rowSelected);\r\n        setSheetRowSelected(rowSelected);\r\n        setPhotoDialogOpen(true);\r\n    } //打开图库\r\n\r\n    const onPhotoConfirm = (valueArr) => {\r\n        let newTableRows = [...tableRows];\r\n        let obj = sheetRowSelected[0];\r\n        let rowObj = { ...obj };\r\n        let newValueArr = valueArr.map((obj) => {\r\n            return { ...obj, key: obj.id, value: obj.url };\r\n        });\r\n        rowObj.imageArr = newValueArr;\r\n        let { id } = rowObj;\r\n        newTableRows[id] = rowObj;\r\n        console.log('onPhotoConfirm', newTableRows);\r\n        setTableRows(newTableRows);\r\n    }; //选择图片\r\n\r\n    //____________ 模板选择\r\n    function needTemplate() {\r\n        console.log('needTemplate');\r\n        setProductDialogOpen(true);\r\n    } //打开模板\r\n\r\n    const onProductConfirm = (valueArr) => {\r\n        let rowObj = valueArr[0];\r\n        if (!rowObj) return;\r\n        let { id } = rowObj;\r\n        makeProductExample({ product_id: id }); //获取 现有产品信息  &  编辑模板\r\n    }; //选择模板\r\n\r\n    //____________JSX函数_______________________________________________\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <FormControlLabel\r\n                    ref={uploaderRef}\r\n                    sx={{ display: 'none' }}\r\n                    labelPlacement=\"top\"\r\n                    control={<Input type=\"file\" />}\r\n                    label={<GridOnIcon fontSize=\"large\" />}\r\n                    onChange={onFileSelected}\r\n                />\r\n            </FormGroup>\r\n            <PhotoSelector\r\n                onPhotoConfirm={onPhotoConfirm}\r\n                dialogOpen={photoDialogOpen}\r\n                setDialogOpen={setPhotoDialogOpen}\r\n                langPack={langPack}\r\n            />\r\n            <ProductSelector\r\n                onProductConfirm={onProductConfirm}\r\n                dialogOpen={productDialogOpen}\r\n                setDialogOpen={setProductDialogOpen}\r\n                langPack={langPack}\r\n            />\r\n            <div hidden={showKeys ? false : true}>\r\n                <Autocomplete\r\n                    id=\"add-product-tempinfo\"\r\n                    sx={{ display: 'inline' }}\r\n                    multiple\r\n                    limitTags={9}\r\n                    disableCloseOnSelect={true}\r\n                    onChange={(e, value) => setUsedKeyArr(value)}\r\n                    options={allKeyArr.length ? allKeyArr.map((obj) => obj.name) : []}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox style={{ marginRight: 8 }} checked={selected} />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    renderTags={(options, getTagProps) =>\r\n                        options.map((option, index) => <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />)\r\n                    }\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} label={<Typography variant=\"h3\">{langPack.steps.bulkUploadeTemplateDetails}</Typography>} />\r\n                    )}\r\n                />\r\n            </div>\r\n            <ProductTable\r\n                tableRows={tableRows}\r\n                tableColumns={tableColumns}\r\n                page_size={page_size}\r\n                page={page}\r\n                total={total}\r\n                localization={localization}\r\n                langPack={langPack}\r\n                columnVisibilityModel={columnVisibilityModel}\r\n                setColumnVisibilityModel={setColumnVisibilityModel}\r\n                handleChangePage={handleChangePage}\r\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                onRowClick={onRowClick}\r\n                productTableFn={productTableFn}\r\n                onTableSelection={onTableSelection}\r\n                loadingProgress={loadingProgress}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nProductUpload.propTypes = {\r\n    langPack: PropTypes.object,\r\n    localization: PropTypes.object,\r\n    groupId: PropTypes.number,\r\n    referredRealProductId: PropTypes.number,\r\n    rtsProduct: PropTypes.bool\r\n};\r\n\r\nexport default ProductUpload;\r\n","/* eslint-disable jsx-a11y/tabindex-no-positive */\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { Typography, Divider, Accordion, AccordionDetails, AccordionSummary, FormControlLabel, Checkbox } from '@mui/material';\r\nimport { ExpandMore as ExpandMoreIcon, Favorite as FavoriteIcon } from '@mui/icons-material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { Languages } from './Languages';\r\nimport ProductCategory from './component/ProductCategory';\r\nimport ProductUpload from './component/ProductUpload';\r\nimport Confirmation from './component/Confirmation';\r\n\r\n// ==============================|| SINGLE PAGE APPLICATION ||============================== //\r\nlet productModified = {};\r\nconst App = () => {\r\n    //全局数据\r\n    console.log('productDraft app running');\r\n    let localization = useSelector((state) => state.localization); //多语言相关\r\n    let globalization = useSelector((state) => state.globalization); //全局数据\r\n    let [langPack, setLangPack] = useState(Languages[localization.locale]); //currentLanguage\r\n    let [loginData] = useState(globalization.baseData.loginData);\r\n    let navigate = useNavigate(); //react-router-dom\r\n    //产品信息汇总\r\n    let urlParams = new URLSearchParams(location.pathname.replace('/product/draft/', ''));\r\n    let [group_id] = useState(Number(urlParams.get('group_id'))); //分组id\r\n    let [referred_real_product_id] = useState(Number(urlParams.get('referred_real_product_id'))); //产品id\r\n    let [finalCatId, setFinalCatId] = useState(0); //当前产品类目id\r\n    let [categories, setCategories] = useState([]); //当前产品类目\r\n    let categoryArr = []; //当前产品类目(暂存)\r\n    let menuRef = useRef(null);\r\n    let [menuState, setMenuState] = useState({\r\n        menuLevel: undefined,\r\n        menuValue: undefined,\r\n        menuArr: [],\r\n        anchorEl: null\r\n    });\r\n\r\n    //控制.面板 //编辑步骤提示 & 菜单折叠\r\n    let [expanded, setExpanded] = useState({ panel1: false });\r\n\r\n    let [rtsProduct, setRtsProduct] = useState(false); //是否是RTS产品\r\n\r\n    useEffect(() => {\r\n        if (!categories.length) return;\r\n        let categoryResult = categories[categories.length - 1];\r\n        let cat_id = categoryResult.category_id;\r\n        setFinalCatId(cat_id);\r\n        if (cat_id) {\r\n            getCategoryAttributeInfo({ cat_id });\r\n            productModified.category_id = cat_id;\r\n        }\r\n        //console.log(categories, categoryResult.category_id);\r\n        return; //类目调整 返回最新的类目id\r\n    }, [categories]);\r\n\r\n    useEffect(() => {\r\n        setLangPack(Languages[localization.locale]);\r\n        return; //语言切换\r\n    }, [localization.locale]);\r\n\r\n    useEffect(() => {\r\n        console.log('I want product drafting');\r\n        if (!loginData) return navigate('/');\r\n        getAllCategories(153710); //获取所有类目\r\n        return () => {\r\n            productModified = {};\r\n            console.log('I leave product draft');\r\n        }; //载入 & 清理\r\n    }, []);\r\n\r\n    //____________一些函数_______________________________________________\r\n\r\n    async function getCategoryInfo(obj) {\r\n        let paramObj = ma.productCategoryQuery(obj);\r\n        let msg = await fetchAPI(paramObj);\r\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\r\n        let res = ma.productCategoryCheck(msg);\r\n        let { status, result } = res.response;\r\n        if (!status) return queryResult(status, result);\r\n        return result;\r\n    } //获取类目信息\r\n\r\n    async function getCategoryAttributeInfo(obj) {\r\n        let paramObj = ma.productCategoryAttributeQuery(obj);\r\n        let msg = await fetchAPI(paramObj);\r\n        if (!msg || !msg.response.status) return queryResult(false, langPack.common.netFail + '\\n' + msg ? msg.response.result : '');\r\n        let res = ma.productCategoryAttributeCheck(msg);\r\n        let { status, result } = res.response;\r\n        if (!status) return queryResult(status, result);\r\n        //console.log(result);\r\n        return;\r\n    } //获取类目属性信息\r\n\r\n    async function getAllCategories(category_id, category_level) {\r\n        if (!category_level) {\r\n            let categoryResult = await getCategoryInfo({ cat_id: category_id });\r\n            if (!categoryResult) return;\r\n            let { level, parent_ids } = categoryResult;\r\n            if (!categoryArr.length) categoryArr = new Array(level); //初始化模式\r\n            categoryArr[level] = categoryResult;\r\n            if (level > 0 && parent_ids && parent_ids.number) {\r\n                let cat_id = parent_ids.number[0];\r\n                getAllCategories(cat_id);\r\n            } else {\r\n                setCategories(categoryArr);\r\n            }\r\n            return;\r\n        }\r\n        let categoryResult = categories[category_level - 1].child_ids.number.find((obj) => obj.category_id === category_id);\r\n        if (!categoryResult) return;\r\n        let { child_ids } = categoryResult;\r\n        let newCategories = [...categories];\r\n        newCategories[category_level] = categoryResult;\r\n        if (category_level + 1 < newCategories.length) newCategories.length = category_level + 1;\r\n        if (child_ids) {\r\n            newCategories.push({ category_id: 0 });\r\n            categoryArr = newCategories;\r\n            showMenu(newCategories.length - 1);\r\n        }\r\n        return setCategories(newCategories); //修改类目模式\r\n    }\r\n\r\n    const showMenu = async (index) => {\r\n        let latestCategories = categoryArr.length ? categoryArr : categories;\r\n        let category_id = latestCategories[index].category_id;\r\n        let childIdsArr = latestCategories[index - 1].child_ids.number;\r\n        for (let cat_id of childIdsArr) {\r\n            if (typeof cat_id === 'object') break;\r\n            let categoryResult = await getCategoryInfo({ cat_id });\r\n            childIdsArr[childIdsArr.indexOf(cat_id)] = categoryResult;\r\n        }\r\n        setMenuState({ menuLevel: index, menuValue: category_id, menuArr: childIdsArr, anchorEl: menuRef.current });\r\n    }; //获取当前的类目id & 通过父级获取子类目选项\r\n\r\n    const closeMenu = (category_id) => {\r\n        let { menuLevel } = menuState;\r\n        setMenuState({ menuArr: [], anchorEl: null });\r\n        console.log(category_id);\r\n        if (category_id !== undefined && category_id !== finalCatId) getAllCategories(category_id, menuLevel);\r\n    }; //需要更新类目\r\n\r\n    const modificationSubmission = async () => {\r\n        if (!finalCatId) return queryResult(false, langPack.steps.productCategoryNeeded);\r\n        queryResult(true, langPack.common.success + '\\n' + langPack.steps.redirecting);\r\n        setTimeout(() => {\r\n            let url = '/product/category_id=' + finalCatId + '&group_id=' + group_id;\r\n            if (rtsProduct) url += '&product_type=' + '1';\r\n            navigate(url);\r\n        }, 1000);\r\n        return;\r\n    };\r\n\r\n    //____________ 面板控制\r\n    const handleAccordionChange = (panel) => (event, isExpanded) => {\r\n        setExpanded((prev) => {\r\n            return { ...prev, [panel]: isExpanded };\r\n        });\r\n    }; //面板展开、收起\r\n    //____________Functions return JSX_______________________________________________\r\n\r\n    return (\r\n        <MainCard title=\"Product Posting --产品发布\">\r\n            <Typography variant=\"h3\">\r\n                {langPack.form.category} & {langPack.form.productType}\r\n            </Typography>\r\n            <ProductCategory\r\n                localization={localization}\r\n                categories={categories}\r\n                menuRef={menuRef}\r\n                menuState={menuState}\r\n                showMenu={showMenu}\r\n                closeMenu={closeMenu}\r\n            />\r\n            <FormControlLabel\r\n                sx={{ paddingLeft: '7px', paddingTop: '7px' }}\r\n                control={\r\n                    <Checkbox\r\n                        icon={<FavoriteIcon color=\"primary\" />}\r\n                        checkedIcon={<FavoriteIcon color=\"error\" />}\r\n                        onChange={(e) => setRtsProduct(e.target.checked)}\r\n                    />\r\n                }\r\n                label={rtsProduct ? langPack.form.rtsProduct : langPack.form.sourcingProduct}\r\n            />\r\n            <div hidden={expanded['panel1']}>\r\n                <Confirmation\r\n                    langPack={langPack}\r\n                    productModified={productModified}\r\n                    showDetails={false}\r\n                    modificationSubmission={modificationSubmission}\r\n                />\r\n            </div>\r\n            <Divider sx={{ marginBottom: '20px' }} />\r\n            <Accordion expanded={expanded['panel1']} onChange={handleAccordionChange('panel1')}>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography variant=\"h3\" sx={{ width: '28%', flexShrink: 0 }}>\r\n                        {expanded['panel1'] ? langPack.steps.bulkUploadGuide : langPack.steps.bulkUpload}\r\n                    </Typography>\r\n                    {expanded['panel1'] ? (\r\n                        <Typography sx={{ fontWeight: 'bold', color: 'brown' }}>{langPack.steps.bulkUploadProcesses}</Typography>\r\n                    ) : null}\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <div style={{ marginTop: '20px' }}>\r\n                        <ProductUpload\r\n                            langPack={langPack}\r\n                            localization={localization}\r\n                            categoryId={finalCatId}\r\n                            groupId={group_id}\r\n                            rtsProduct={rtsProduct}\r\n                            referredRealProductId={referred_real_product_id}\r\n                        />\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"sourceRoot":""}