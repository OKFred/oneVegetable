{"version":3,"sources":["views/product/Languages.js","views/product/component/ProductFolder.js","views/product/component/ProductTable.js","views/product/index.js"],"names":["Languages","enUS","folder","currentFolder","needFolderName","addNewFolder","folderNull","dataNull","table","tableHeader","categoryName","productId","subject","status","display","attributes","keywords","price","min_order_quantity","unit_type","gmt_create","gmt_modified","tableToolbar","menuHide","menuShow","productDisplayOn","productDisplayOff","productEdit","form","KeyInformation","ProductAttributes","category","attributeMissing","attributeDuplicated","pieces","steps","first","second","finally","previous","next","complete","editPrice","choosePhotos","uploadPhotos","removePhotos","mainPhotoRequired","descriptionOverflow","addAttributes","removeAttributes","modificationNull","modificationDone","common","yes","no","netFail","zhCN","ProductFolder","folderArr","addFolder","setCurrentFolder","langPack","useState","newFolder","setNewFolder","folderCommand","setFolderCommand","a","queryResult","group_name","refreshFolders","length","style","marginBottom","Input","sx","height","marginRight","variant","color","type","placeholder","onChange","e","target","value","trim","Button","startIcon","Check","onClick","Cancel","Breadcrumbs","Folder","Select","minWidth","autoWidth","MenuItem","disabled","map","obj","index","group_id","ButtonGroup","Add","Typography","selectedArr","ProductTable","tableRows","tableColumns","page_size","page","localization","changeProductDisplay","handleChangePage","handleChangeRowsPerPage","onRowClick","useNavigate","checkboxSelection","width","DataGrid","localeText","locale","components","MuiDataGrid","defaultProps","Toolbar","GridToolbarContainer","GridToolbarColumnsButton","GridToolbarFilterButton","GridToolbarDensitySelector","GridToolbarExport","hidden","padding","ArrowUpward","list","product_id","join","new_display","product_id_list","ArrowDownward","onStateChange","selection","id","find","console","log","pageSize","rowCount","columns","getRowHeight","rows","rowsPerPageOptions","disableSelectionOnClick","paginationMode","onPageChange","onPageSizeChange","srcset","url","cols","ext","exec","src","srcSet","App","dispatch","useDispatch","useSelector","state","setLangPack","navigate","globalization","baseData","loginData","appData","setAppData","parentFolderArr","setFolderArr","setTableColumns","setTableRows","setPage","setPage_size","paramObj","ma","productGroupAddQuery","fetchAPI","msg","response","result","res","productGroupAddCheck","getFolders","max","productGroupQuery","productGroupCheck","childIdArr","forEach","push","getProductList","group_id1","productListQuery","productListCheck","products","alibaba_product_brief_response","productDisplayQuery","productDisplayCheck","setTimeout","tableFormatter","field","headerName","valueGetter","params","row","renderCell","href","pc_detail_url","main_image","images","string","alt","sortable","useEffect","SET_APPDATA","appProduct","cache","MainCard","title","newPage","current_page","newSize"],"mappings":"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","file":"static/js/11.371f2948.chunk.js","sourcesContent":["let Languages = {\r\n    enUS: {\r\n        folder: {\r\n            currentFolder: 'please select',\r\n            needFolderName: 'please input name for new folder',\r\n            addNewFolder: 'add new folder',\r\n            folderNull: 'folder not found',\r\n            dataNull: 'data not found'\r\n        },\r\n        table: {\r\n            tableHeader: 'Products',\r\n            categoryName: 'category name',\r\n            productId: 'product id',\r\n            subject: 'subject',\r\n            status: 'status',\r\n            display: 'display',\r\n            attributes: 'attributes',\r\n            keywords: 'keywords',\r\n            price: 'price (range)',\r\n            min_order_quantity: 'min order quantity(MOQ)',\r\n            unit_type: 'unit type',\r\n            gmt_create: 'date create',\r\n            gmt_modified: 'date modified'\r\n        },\r\n        tableToolbar: {\r\n            menuHide: 'hide menu',\r\n            menuShow: 'show menu',\r\n            productDisplayOn: 'in-stock',\r\n            productDisplayOff: 'out-stock',\r\n            productEdit: 'edit'\r\n        },\r\n        form: {\r\n            KeyInformation: 'key information',\r\n            ProductAttributes: 'product attributes',\r\n            subject: '128 letters max.',\r\n            category: 'click to change category',\r\n            keywords: '3 keywords max. Comma(,) separated',\r\n            price: 'set price (range)',\r\n            min_order_quantity: 'optional',\r\n            attributes: 'add or delete',\r\n            attributeMissing: 'attribute missing',\r\n            attributeDuplicated: 'attribute duplicated',\r\n            pieces: 'pieces'\r\n        },\r\n        steps: {\r\n            first: 'Edit Attributes',\r\n            second: 'Edit Contents',\r\n            finally: 'Preview & Publish',\r\n            previous: 'Previous',\r\n            next: 'Next',\r\n            complete: 'Complete',\r\n            editPrice: 'Edit Price',\r\n            choosePhotos: 'Choose Photos',\r\n            uploadPhotos: 'Upload Photos',\r\n            removePhotos: 'double click to remove the photo',\r\n            mainPhotoRequired: 'Need at least one photo',\r\n            descriptionOverflow: 'description length shall be smaller than 60k letters',\r\n            addAttributes: 'Add Attributes',\r\n            removeAttributes: 'Remove Attributes',\r\n            modificationNull: 'No modification made',\r\n            modificationDone: 'Will submit the following modifications:'\r\n        },\r\n        common: {\r\n            yes: 'OK',\r\n            no: 'Cancel',\r\n            netFail: 'request failed'\r\n        }\r\n    },\r\n    zhCN: {\r\n        folder: {\r\n            currentFolder: '请选择',\r\n            needFolderName: '请填写文件夹名',\r\n            addNewFolder: '新建文件夹',\r\n            folderNull: '文件夹不存在',\r\n            dataNull: '数据不存在'\r\n        },\r\n        table: {\r\n            tableHeader: '产品',\r\n            categoryName: '类目',\r\n            productId: '产品 id',\r\n            subject: '标题',\r\n            status: '审核状态',\r\n            display: '上架状态',\r\n            attributes: '属性',\r\n            keywords: '关键词',\r\n            price: '价格(区间)',\r\n            min_order_quantity: '最小起订量(MOQ)',\r\n            unit_type: '单位',\r\n            gmt_create: '创建日期',\r\n            gmt_modified: '修改日期'\r\n        },\r\n        tableToolbar: {\r\n            menuHide: '隐藏菜单',\r\n            menuShow: '显示菜单',\r\n            productDisplayOn: '上架',\r\n            productDisplayOff: '下架',\r\n            productEdit: '编辑'\r\n        },\r\n        form: {\r\n            KeyInformation: '基本信息',\r\n            ProductAttributes: '产品属性',\r\n            subject: '128 字符以内',\r\n            category: '点击更换类目',\r\n            keywords: '最多三个关键词，用英文逗号(,)分隔',\r\n            price: '设置价格(区间)',\r\n            min_order_quantity: '选填',\r\n            attributes: '可增可减',\r\n            attributeMissing: '属性缺失',\r\n            attributeDuplicated: '属性重复',\r\n            pieces: '件'\r\n        },\r\n        steps: {\r\n            first: '属性编辑',\r\n            second: '详情编辑',\r\n            finally: '预览&发布',\r\n            previous: '上一步',\r\n            next: '下一步',\r\n            complete: '完成',\r\n            editPrice: '编辑价格',\r\n            choosePhotos: '选择图片',\r\n            uploadPhotos: '上传图片',\r\n            removePhotos: '双击移除图片',\r\n            mainPhotoRequired: '需要保留至少一张主图',\r\n            descriptionOverflow: '描述长度不能超过6万字符',\r\n            addAttributes: '添加属性',\r\n            removeAttributes: '移除空白属性',\r\n            modificationNull: '没有任何修改',\r\n            modificationDone: '将提交如下内容:'\r\n        },\r\n        common: {\r\n            yes: '确定',\r\n            no: '取消',\r\n            netFail: '请求失败'\r\n        }\r\n    }\r\n};\r\n\r\nexport { Languages };\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Button, ButtonGroup, Input, Select, MenuItem, Breadcrumbs } from '@mui/material';\r\nimport {\r\n    Folder as FolderIcon,\r\n    Check as CheckIcon,\r\n    Cancel as CancelIcon,\r\n    Add as AddIcon,\r\n    ModeEdit as EditIcon,\r\n    DeleteOutline as DeleteIcon,\r\n    FileUpload as UploadIcon\r\n} from '@mui/icons-material';\r\n\r\nfunction ProductFolder({ folderArr, currentFolder, addFolder, setCurrentFolder, langPack }) {\r\n    let [newFolder, setNewFolder] = useState(false);\r\n    let [folderCommand, setFolderCommand] = useState(false);\r\n    async function onFolderAdd() {\r\n        if (!newFolder) return queryResult(false, langPack.folder.needFolderName);\r\n        let result = await addFolder({ group_name: newFolder });\r\n        if (result) {\r\n            setCurrentFolder('');\r\n            refreshFolders();\r\n        }\r\n        return;\r\n    }\r\n    function refreshFolders() {\r\n        setNewFolder('');\r\n        setFolderCommand(false);\r\n        return;\r\n    }\r\n\r\n    return !folderArr || !folderArr.length ? (\r\n        <Typography variant=\"body2\">{langPack.folder.folderNull}</Typography>\r\n    ) : (\r\n        <div style={{ marginBottom: '20px' }}>\r\n            {!folderCommand ? (\r\n                <>\r\n                    <Breadcrumbs aria-label=\"breadcrumb\" sx={{ display: 'inline-block', marginRight: '5px' }}>\r\n                        <FolderIcon />\r\n                        <Select\r\n                            sx={{ height: '30px', minWidth: '100px' }}\r\n                            autoWidth={true}\r\n                            value={currentFolder}\r\n                            onChange={(e) => setCurrentFolder(e.target.value)}\r\n                        >\r\n                            <MenuItem value={langPack.folder.currentFolder} disabled>\r\n                                {langPack.folder.currentFolder}\r\n                            </MenuItem>\r\n                            {folderArr.map((obj, index) => (\r\n                                <MenuItem key={index} value={obj.group_id}>\r\n                                    {obj.group_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </Breadcrumbs>\r\n                    <ButtonGroup variant=\"\">\r\n                        <Button onClick={() => setFolderCommand('add')}>\r\n                            <AddIcon />\r\n                        </Button>\r\n                        <Button onClick={() => setFolderCommand('edit')} disabled>\r\n                            <EditIcon />\r\n                        </Button>\r\n                        <Button onClick={() => setFolderCommand('delete')} disabled>\r\n                            <DeleteIcon />\r\n                        </Button>\r\n                        <Button onClick={() => setFolderCommand('upload')} disabled>\r\n                            <UploadIcon />\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {folderCommand === 'add' ? (\r\n                        <>\r\n                            <Input\r\n                                sx={{ height: '30px', marginRight: '10px' }}\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                type=\"text\"\r\n                                placeholder={langPack.folder.addNewFolder}\r\n                                onChange={(e) => setNewFolder(e.target.value.trim())}\r\n                            />\r\n                            <Button startIcon={<CheckIcon />} onClick={onFolderAdd}>\r\n                                {langPack.common.yes}\r\n                            </Button>\r\n                            <Button startIcon={<CancelIcon />} onClick={() => setFolderCommand(false)}>\r\n                                {langPack.common.no}\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nProductFolder.propTypes = {\r\n    localization: PropTypes.object,\r\n    finalDescription: PropTypes.string,\r\n    setFinalDescription: PropTypes.func,\r\n    folderArr: PropTypes.array,\r\n    currentFolder: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    addFolder: PropTypes.func,\r\n    setCurrentFolder: PropTypes.func,\r\n    langPack: PropTypes.object\r\n};\r\n\r\nexport default ProductFolder;\r\n","import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Button } from '@mui/material';\r\nimport {\r\n    ArrowUpward as ArrowUpwardIcon,\r\n    ArrowDownward as ArrowDownwardIcon,\r\n    /* VisibilityOff as VisibilityOffIcon,\r\n    Construction as ConstructionIcon, */\r\n    ModeEdit as EditIcon\r\n} from '@mui/icons-material';\r\nimport {\r\n    DataGrid,\r\n    GridToolbarContainer,\r\n    GridToolbarColumnsButton,\r\n    GridToolbarFilterButton,\r\n    GridToolbarExport,\r\n    GridToolbarDensitySelector,\r\n    zhCN\r\n} from '@mui/x-data-grid';\r\n\r\nlet selectedArr = []; //当前选中的产品id，需要转换成加密id才可以调用API\r\nfunction ProductTable({\r\n    tableRows,\r\n    tableColumns,\r\n    page_size,\r\n    page,\r\n    localization,\r\n    langPack,\r\n    changeProductDisplay,\r\n    handleChangePage,\r\n    handleChangeRowsPerPage,\r\n    onRowClick\r\n}) {\r\n    const navigate = useNavigate(); //react-router-dom\r\n    //DataGrid toolbar;\r\n    let [checkboxSelection /* , setCheckboxSelection */] = useState(true);\r\n    //let [menuControlText, setMenuControlText] = useState(langPack.tableToolbar.menuHide);\r\n\r\n    const onStateChange = (obj, e) => {\r\n        let { selection } = obj;\r\n        if (selection.length === selectedArr.length) return;\r\n        selectedArr = selection.map((id) => tableRows.find((obj) => obj.id === id));\r\n        console.log(selectedArr.length + ' selected');\r\n    }; //勾选\r\n    return (\r\n        <div style={{ height: 600, width: '100%' }}>\r\n            <DataGrid\r\n                checkboxSelection={checkboxSelection}\r\n                localeText={localization.locale === 'zhCN' ? zhCN.components.MuiDataGrid.defaultProps.localeText : {}}\r\n                components={{\r\n                    Toolbar: () => (\r\n                        <GridToolbarContainer>\r\n                            <GridToolbarColumnsButton />\r\n                            <GridToolbarFilterButton />\r\n                            <GridToolbarDensitySelector />\r\n                            <GridToolbarExport />\r\n                            {/* <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={\r\n                                        menuControlText === langPack.tableToolbar.menuHide ? <VisibilityOffIcon /> : <ConstructionIcon />\r\n                                    }\r\n                                    onClick={() => {\r\n                                        setCheckboxSelection(!checkboxSelection);\r\n                                        setMenuControlText(\r\n                                            menuControlText === langPack.tableToolbar.menuHide\r\n                                                ? langPack.tableToolbar.menuShow\r\n                                                : langPack.tableToolbar.menuHide\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    {menuControlText}\r\n                                </Button> */}\r\n                            <span hidden={!selectedArr.length}>\r\n                                <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={<ArrowUpwardIcon />}\r\n                                    onClick={() => {\r\n                                        let list = selectedArr.map((obj) => obj.product_id).join(',');\r\n                                        changeProductDisplay({\r\n                                            new_display: 'on',\r\n                                            product_id_list: list\r\n                                        });\r\n                                    }}\r\n                                >\r\n                                    {langPack.tableToolbar.productDisplayOn}\r\n                                </Button>\r\n                                <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={<ArrowDownwardIcon />}\r\n                                    onClick={() => {\r\n                                        let list = selectedArr.map((obj) => obj.product_id).join(',');\r\n                                        changeProductDisplay({\r\n                                            new_display: 'off',\r\n                                            product_id_list: list\r\n                                        });\r\n                                    }}\r\n                                >\r\n                                    {langPack.tableToolbar.productDisplayOff}\r\n                                </Button>\r\n                                {/* <Button\r\n                                    sx={{ padding: '4px 5px' }}\r\n                                    startIcon={<EditIcon />}\r\n                                    disabled={selectedArr.length !== 1}\r\n                                    onClick={() => {\r\n                                        if (!selectedArr.length) return;\r\n                                        let product_id = selectedArr.map((obj) => obj.product_id).join(',');\r\n                                        navigate(`/product/${product_id}`);\r\n                                        return;\r\n                                    }}\r\n                                >\r\n                                    {langPack.tableToolbar.productEdit}\r\n                                </Button> */}\r\n                            </span>\r\n                        </GridToolbarContainer>\r\n                    )\r\n                }}\r\n                onRowClick={onRowClick}\r\n                onStateChange={onStateChange}\r\n                page={page}\r\n                pageSize={page_size}\r\n                rowCount={9999}\r\n                columns={tableColumns}\r\n                getRowHeight={() => 88}\r\n                rows={tableRows}\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                disableSelectionOnClick\r\n                paginationMode=\"server\"\r\n                onPageChange={handleChangePage}\r\n                onPageSizeChange={handleChangeRowsPerPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nProductTable.propTypes = {\r\n    tableRows: PropTypes.array,\r\n    tableColumns: PropTypes.array,\r\n    page_size: PropTypes.number,\r\n    page: PropTypes.number,\r\n    localization: PropTypes.object,\r\n    langPack: PropTypes.object,\r\n    changeProductDisplay: PropTypes.func,\r\n    handleChangePage: PropTypes.func,\r\n    handleChangeRowsPerPage: PropTypes.func,\r\n    onRowClick: PropTypes.func\r\n};\r\n\r\nexport default ProductTable;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SET_APPDATA } from 'store/actions';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport { Languages } from './Languages';\nimport ProductFolder from './component/ProductFolder';\nimport ProductTable from './component/ProductTable';\n\nfunction srcset(url, width, height, rows, cols) {\n    let ext = /\\.(\\w{3,4})$/.exec(url)[0];\n    return {\n        src: `${url}_${width * cols}x${height * rows}${ext}`,\n        srcSet: `${url}_${width * cols * 2}x${height * rows * 2}${ext} 2x`\n    };\n}\n\n// ==============================|| SINGLE PAGE APPLICATION ||============================== //\n\nconst App = () => {\n    console.log('product app running');\n    const dispatch = useDispatch();\n    const localization = useSelector((state) => state.localization); //read only (language related)\n    let [langPack, setLangPack] = useState(Languages[localization.locale]); //currentLanguage\n    const navigate = useNavigate(); //react-router-dom\n    const globalization = useSelector((state) => state.globalization);\n    const [loginData] = useState(globalization.baseData.loginData);\n    let [appData, setAppData] = useState(globalization.appData); //全局数据暂存\n\n    //states [所有文件夹 ， 当前文件夹 ， 列数据 ， 所有行数据 ， 选中行数据， 当前页 ， 页面大小]\n    let parentFolderArr = []; //临时存放下文件夹id，因为数据不返回名字，还需要遍历下\n    let [folderArr, setFolderArr] = useState([]);\n    let [currentFolder, setCurrentFolder] = useState(langPack.folder.currentFolder);\n    let [tableColumns, setTableColumns] = useState([]);\n    let [tableRows, setTableRows] = useState([]);\n    let [page, setPage] = useState(0);\n    let [page_size, setPage_size] = useState(10);\n\n    useEffect(() => {\n        dispatch({ type: SET_APPDATA, appData });\n    }, [dispatch, appData]); //全局数据修改，因为登录\n\n    useEffect(() => {\n        if (folderArr.length && tableRows.length) {\n            setAppData({ ...globalization.appData, appProduct: { folderArr, tableRows, currentFolder } });\n        }\n        return () => {};\n    }, [folderArr, tableRows]); //订阅全局数据变化\n\n    useEffect(() => {\n        if (currentFolder && currentFolder !== langPack.folder.currentFolder) {\n            getProductList();\n            setPage(0);\n            tableFormatter();\n        }\n        return; //更换文件夹时\n    }, [currentFolder]);\n\n    useEffect(() => {\n        setLangPack(Languages[localization.locale]);\n        return; //语言切换\n    }, [localization.locale]);\n\n    useEffect(() => {\n        return () => {};\n    }, [globalization.appData]); //订阅全局数据变化\n\n    useEffect(() => {\n        console.log('I want products');\n        if (!loginData) return navigate('/');\n        let cache = globalization.appData.appProduct;\n        if (cache) {\n            if (!cache.folderArr || !cache.folderArr.length) getFolders();\n            else setFolderArr(cache.folderArr);\n            if (!cache.tableRows || !cache.tableRows.length) getProductList();\n            else setTableRows(cache.tableRows);\n            setCurrentFolder(cache.currentFolder);\n        } //读取缓存\n        else {\n            getFolders();\n            getProductList();\n        }\n        //初始化\n        tableFormatter();\n        return () => {\n            console.log('I leave products');\n        }; //载入 & 清理\n    }, []);\n\n    //____________一些函数_______________________________________________\n\n    async function addFolder(obj) {\n        let paramObj = ma.productGroupAddQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + ' >> ' + msg.response.result);\n        let res = ma.productGroupAddCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(status, result);\n        let { group_id, group_name } = result;\n        setFolderArr([...folderArr, { group_id, group_name }]);\n    } //新增文件夹\n    async function getFolders(obj, max) {\n        let paramObj = ma.productGroupQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + ' >> ' + msg.response.result);\n        let res = ma.productGroupCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        if (!obj) {\n            parentFolderArr = []; //清空下\n            //获取主目录，然后开始遍历\n            let childIdArr = result['children_id_list']['number'];\n            if (!childIdArr || !childIdArr.length) return;\n            childIdArr.forEach((id) => getFolders({ group_id: id }, childIdArr.length));\n        } else {\n            let { group_id, group_name } = result;\n            parentFolderArr.push({ group_id, group_name });\n            if (parentFolderArr.length === max) setFolderArr(parentFolderArr);\n        }\n    } //获取文件夹列表\n    async function getProductList(obj) {\n        if (!obj) obj = {};\n        if (currentFolder && currentFolder !== langPack.folder.currentFolder) {\n            obj.group_id1 = currentFolder;\n        } //子分组\n        let paramObj = ma.productListQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + ' >> ' + msg.response.result);\n        let res = ma.productListCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        if (result.products) {\n            setTableRows(result.products.alibaba_product_brief_response);\n            return;\n        }\n        setTableRows([]);\n        return;\n    } //获取产品列表\n    async function changeProductDisplay(obj) {\n        if (!obj) return false;\n        let paramObj = ma.productDisplayQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, langPack.common.netFail + ' >> ' + msg.response.result);\n        let res = ma.productDisplayCheck(msg);\n        let { status, result } = res.response;\n        if (!status) return queryResult(false, result);\n        setTimeout(getProductList, 2000);\n        return;\n    } //产品上下架\n\n    //____________ ProductTable functions ___________________________________________________\n    function tableFormatter() {\n        const columns = [\n            {\n                field: 'imgWithURL',\n                headerName: langPack.table.tableHeader,\n                minWidth: 50,\n                valueGetter: (params) => params.row,\n                renderCell: (params) => (\n                    <a href={params.value.pc_detail_url} target=\"_blank\">\n                        <img {...srcset(params.value.main_image.images.string[0], 100, 100, 1, 1)} alt=\"mainPic\" />\n                    </a>\n                )\n            },\n            {\n                field: 'subject',\n                minWidth: 500,\n                headerName: langPack.table.subject\n            },\n            {\n                field: 'status',\n                headerName: langPack.table.status\n            },\n            {\n                field: 'display',\n                headerName: langPack.table.display\n            },\n            {\n                field: 'gmt_create',\n                headerName: langPack.table.gmt_create,\n                sortable: false,\n                width: 160\n            },\n            {\n                field: 'gmt_modified',\n                headerName: langPack.table.gmt_modified,\n                sortable: false,\n                width: 160\n            }\n        ];\n        setTableColumns(columns);\n    }\n\n    const handleChangePage = (newPage) => {\n        setPage(newPage);\n        getProductList({ current_page: newPage + 1, page_size });\n    }; //翻页\n    const handleChangeRowsPerPage = (newSize) => {\n        setPage_size(newSize);\n        getProductList({ current_page: page + 1, page_size: newSize });\n    }; //页面大小调整\n    const onRowClick = (obj, e) => {\n        //console.log(obj, e);\n        //let { id, row } = obj;\n    }; //单元格点击\n\n    //____________JSX函数_______________________________________________\n\n    return (\n        <MainCard title=\"Products --产品\">\n            <ProductFolder\n                folderArr={folderArr}\n                currentFolder={currentFolder}\n                addFolder={addFolder}\n                setCurrentFolder={setCurrentFolder}\n                langPack={langPack}\n            />\n            <ProductTable\n                tableRows={tableRows}\n                tableColumns={tableColumns}\n                page_size={page_size}\n                page={page}\n                localization={localization}\n                langPack={langPack}\n                changeProductDisplay={changeProductDisplay}\n                handleChangePage={handleChangePage}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n                onRowClick={onRowClick}\n            />\n        </MainCard>\n    );\n};\n\nexport default App;\n"],"sourceRoot":""}