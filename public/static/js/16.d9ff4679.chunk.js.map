{"version":3,"sources":["views/order/Languages.js","views/order/component/OrderTable.js","views/order/component/OrderFilter.js","views/order/index.js"],"names":["Languages","enUS","folder","currentFolder","needFolderName","addNewFolder","folderNull","dataNull","table","tableHeader","trade_id","timeCreated","timeModified","pay_method","pay_status","pay_step","payTime","receiveTime","shouldPayCurrency","shouldPayAmount","payAmount","receiveAmount","serviceAmount","serviceCurrency","currency","tableToolbar","payment","detail","form","dateConversion","orderFundError","orderError","startDate","endDate","query","buyerId","common","yes","no","netFail","zhCN","selectedArr","updatedArr","App","tableRows","tableColumns","page_size","page","total","localization","langPack","handleChangePage","handleChangeRowsPerPage","onRowClick","columnVisibilityModel","setColumnVisibilityModel","fundAutoQuery","setFundAutoQuery","tableHeight","window","innerHeight","style","height","width","DataGrid","experimentalFeatures","newEditingApi","checkboxSelection","localeText","locale","components","MuiDataGrid","defaultProps","Toolbar","GridToolbarContainer","GridToolbarColumnsButton","GridToolbarFilterButton","GridToolbarDensitySelector","GridToolbarExport","csvOptions","utf8WithBom","fileName","Date","valueOf","getTimezoneOffset","toISOString","replace","Button","sx","padding","fontSize","startIcon","Paid","PaidOutlined","onClick","prev","hidden","length","onCellEditCommit","params","id","row","field","value","oldIndex","findIndex","obj","newData","undefined","onStateChange","selection","map","find","console","log","pageSize","rowCount","columns","onColumnVisibilityModelChange","getRowHeight","rows","rowsPerPageOptions","disableSelectionOnClick","paginationMode","onPageChange","onPageSizeChange","localeMap","cnLocale","enLocale","maskMap","setDate","setDateType","autoQuery","setBuyerId","dateMasks","label","marginBottom","display","flexDirection","Tooltip","title","TextField","margin","variant","Typography","color","fontWeight","defaultValue","onBlur","e","target","LocalizationProvider","dateAdapter","AdapterDateFns","DesktopDatePicker","mask","onChange","renderInput","Box","marginLeft","marginRight","Slider","step","marks","onChangeCommitted","v","fundArr","navigate","useNavigate","browserLocale","test","navigator","language","globalization","useSelector","state","useState","baseData","loginData","setLangPack","setPage","setPage_size","setTotal","setTableColumns","setTableRows","setStartDate","setEndDate","dateType","useEffect","queryFund","tableFormatter","queryDateConvert","timeDifference","isPDT","Format","paramObj","role","start_page","create_date_start","time","create_date_end","modified_date_start","modified_date_end","other_login_id","Object","assign","queryOrder","param_trade_ecology_order_list_query","JSON","stringify","a","ma","sellerOrderQuery","fetchAPI","msg","response","status","queryResult","result","res","sellerOrderCheck","order_list","total_count","trade_ecology_order","realLength","forEach","queryOrderFund","e_trade_id","sellerOrderFundQuery","sellerOrderFundCheck","request","data","index","service_fee","fund_pay_list","amount","fund_pay","pay_amount","pay_time","receive_time","should_pay_amount","receive_amount","payCurrency","receiveCurrency","timestamp","newArr","i","push","fund","headerName","flex","valueGetter","valueFormatter","timeOrderCreated","timeOrderModified","sortable","MainCard","OrderFilter","name","dateCheck","dateEarly","dateLate","OrderTable","newPage","newSize"],"mappings":"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","file":"static/js/16.d9ff4679.chunk.js","sourcesContent":["let Languages = {\r\n    enUS: {\r\n        folder: {\r\n            currentFolder: 'please select',\r\n            needFolderName: 'please input name for new folder',\r\n            addNewFolder: 'add new folder',\r\n            folderNull: 'folder not found',\r\n            dataNull: 'data not found'\r\n        },\r\n        table: {\r\n            tableHeader: 'Order',\r\n            trade_id: 'Trade id',\r\n            timeCreated: 'Time Created',\r\n            timeModified: 'Time Modified',\r\n            pay_method: 'Method',\r\n            pay_status: 'Status',\r\n            pay_step: 'Step',\r\n            payTime: 'Pay Time',\r\n            receiveTime: 'Receive Time',\r\n            shouldPayCurrency: 'Sale Currency',\r\n            shouldPayAmount: 'Sale Amount',\r\n            payAmount: 'Pay Amount',\r\n            receiveAmount: 'Receive Amount',\r\n            serviceAmount: 'Service Amount',\r\n            serviceCurrency: 'Service Currency',\r\n            currency: 'Currency'\r\n        },\r\n        tableToolbar: {\r\n            payment: 'payment',\r\n            detail: 'detail'\r\n        },\r\n        form: {\r\n            dateConversion: 'Local Time',\r\n            orderFundError: 'Order fund not found',\r\n            orderError: 'Order not found',\r\n            startDate: 'Start Date',\r\n            endDate: 'End Date',\r\n            query: 'Query',\r\n            buyerId: 'Buyer Member Id'\r\n        },\r\n        common: {\r\n            yes: 'OK',\r\n            no: 'Cancel',\r\n            netFail: 'request failed'\r\n        }\r\n    },\r\n    zhCN: {\r\n        folder: {\r\n            currentFolder: '请选择',\r\n            needFolderName: '请填写文件夹名',\r\n            addNewFolder: '新建文件夹',\r\n            folderNull: '文件夹不存在',\r\n            dataNull: '数据不存在'\r\n        },\r\n        table: {\r\n            tableHeader: '订单',\r\n            trade_id: '订单号',\r\n            timeCreated: '创建时间',\r\n            timeModified: '修改时间',\r\n            pay_method: '方式',\r\n            pay_status: '状态',\r\n            pay_step: '步骤',\r\n            payTime: '付款时间',\r\n            receiveTime: '到账时间',\r\n            shouldPayCurrency: '应付币种',\r\n            shouldPayAmount: '应付',\r\n            payAmount: '实付',\r\n            receiveAmount: '到账',\r\n            serviceAmount: '服务费',\r\n            serviceCurrency: '服务费币种',\r\n            currency: '币种'\r\n        },\r\n        tableToolbar: {\r\n            payment: '资金',\r\n            detail: '详情'\r\n        },\r\n        form: {\r\n            dateConversion: '本地时间',\r\n            orderFundError: '订单资金未查到',\r\n            orderError: '订单未查到',\r\n            startDate: '开始时间',\r\n            endDate: '结束时间',\r\n            query: '查询',\r\n            buyerId: '买家 Member Id'\r\n        },\r\n        common: {\r\n            yes: '确定',\r\n            no: '取消',\r\n            netFail: '请求失败'\r\n        }\r\n    }\r\n};\r\n\r\nexport { Languages };\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Button } from '@mui/material';\r\nimport {\r\n    InfoOutlined as InfoOutlinedIcon,\r\n    PaidOutlined as PaidOutlinedIcon,\r\n    Paid as PaidIcon,\r\n    Check as CheckIcon,\r\n    ArrowUpward as ArrowUpwardIcon,\r\n    ArrowDownward as ArrowDownwardIcon,\r\n    ModeEdit as EditIcon\r\n} from '@mui/icons-material';\r\nimport {\r\n    DataGrid,\r\n    GridToolbarContainer,\r\n    GridToolbarColumnsButton,\r\n    GridToolbarFilterButton,\r\n    GridToolbarExport,\r\n    GridToolbarDensitySelector,\r\n    zhCN\r\n} from '@mui/x-data-grid';\r\n\r\nlet selectedArr = []; //当前选中的产品id，需要转换成加密id才可以调用API\r\nlet updatedArr = []; //更新了的行\r\nfunction App({\r\n    tableRows,\r\n    tableColumns,\r\n    page_size,\r\n    page,\r\n    total,\r\n    localization,\r\n    langPack,\r\n    handleChangePage,\r\n    handleChangeRowsPerPage,\r\n    onRowClick,\r\n    columnVisibilityModel,\r\n    setColumnVisibilityModel,\r\n    fundAutoQuery,\r\n    setFundAutoQuery\r\n}) {\r\n    //DataGrid toolbar;\r\n    const tableHeight = window.innerHeight < 700 ? 350 : window.innerHeight - 350;\r\n    const onStateChange = (obj) => {\r\n        let { selection } = obj;\r\n        if (selection.length === selectedArr.length) return;\r\n        selectedArr = selection.map((id) => tableRows.find((obj) => obj.id === id));\r\n        console.log(selectedArr.length + ' selected');\r\n    }; //勾选\r\n    const onCellEditCommit = (params) => {\r\n        let { id, row, field, value } = params;\r\n        let oldIndex = tableRows.findIndex((obj) => obj.id === id);\r\n        if (oldIndex === -1) return; //没找到?\r\n        let oldValue = tableRows[oldIndex][field];\r\n        if (oldValue === value) {\r\n            updatedArr[oldIndex] = undefined;\r\n            return;\r\n        } //先对比原始数据，如果没有改变，则不更新\r\n        let newData = { ...row, [field]: value };\r\n        updatedArr[oldIndex] = newData; //不管改不改，先存着再说\r\n        return;\r\n    };\r\n    return (\r\n        <div style={{ height: tableHeight, width: '100%' }}>\r\n            <DataGrid\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                checkboxSelection={true}\r\n                localeText={localization.locale === 'zhCN' ? zhCN.components.MuiDataGrid.defaultProps.localeText : {}}\r\n                components={{\r\n                    Toolbar: () => (\r\n                        <GridToolbarContainer>\r\n                            <GridToolbarColumnsButton />\r\n                            <GridToolbarFilterButton />\r\n                            <GridToolbarDensitySelector />\r\n                            <GridToolbarExport\r\n                                csvOptions={{\r\n                                    utf8WithBom: true,\r\n                                    fileName:\r\n                                        langPack.table.tableHeader +\r\n                                        '_' +\r\n                                        new Date(new Date().valueOf() - new Date().getTimezoneOffset() * 60 * 1000)\r\n                                            .toISOString()\r\n                                            .replace(/T.*/, '')\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                sx={{ padding: '4px 5px', fontSize: '13px' }}\r\n                                startIcon={fundAutoQuery ? <PaidIcon /> : <PaidOutlinedIcon />}\r\n                                onClick={() => setFundAutoQuery((prev) => !prev)}\r\n                            >\r\n                                {langPack.tableToolbar.payment}\r\n                            </Button>\r\n                            <span hidden={!selectedArr.length}></span>\r\n                        </GridToolbarContainer>\r\n                    )\r\n                }}\r\n                onRowClick={onRowClick}\r\n                onCellEditCommit={onCellEditCommit}\r\n                onStateChange={onStateChange}\r\n                page={page}\r\n                pageSize={page_size}\r\n                rowCount={total}\r\n                columns={tableColumns}\r\n                columnVisibilityModel={columnVisibilityModel}\r\n                onColumnVisibilityModelChange={setColumnVisibilityModel}\r\n                getRowHeight={() => 88}\r\n                rows={tableRows}\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                disableSelectionOnClick\r\n                paginationMode=\"server\"\r\n                onPageChange={handleChangePage}\r\n                onPageSizeChange={handleChangeRowsPerPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nApp.propTypes = {\r\n    tableRows: PropTypes.array,\r\n    tableColumns: PropTypes.array,\r\n    page_size: PropTypes.number,\r\n    page: PropTypes.number,\r\n    total: PropTypes.number,\r\n    localization: PropTypes.object,\r\n    langPack: PropTypes.object,\r\n    columnVisibilityModel: PropTypes.object,\r\n    setColumnVisibilityModel: PropTypes.func,\r\n    handleChangePage: PropTypes.func,\r\n    handleChangeRowsPerPage: PropTypes.func,\r\n    fundAutoQuery: PropTypes.bool,\r\n    setFundAutoQuery: PropTypes.func,\r\n    onRowClick: PropTypes.func\r\n};\r\n\r\nexport default App;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { TextField, Box, Slider, Tooltip, Button, Typography } from '@mui/material';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\r\n\r\n//date-fns\r\nimport cnLocale from 'date-fns/locale/zh-CN';\r\nimport enLocale from 'date-fns/locale/en-GB';\r\n\r\nconst localeMap = {\r\n    zhCN: cnLocale,\r\n    enUS: enLocale\r\n};\r\n\r\nconst maskMap = {\r\n    zhCN: '__-__-__',\r\n    enUS: '__/__/____'\r\n};\r\n\r\nfunction App({ localization, langPack, startDate, endDate, setDate, setDateType, autoQuery, buyerId, setBuyerId }) {\r\n    let { locale } = localization;\r\n    let dateMasks = [\r\n        {\r\n            value: 0,\r\n            label: langPack.table.timeCreated\r\n        },\r\n        {\r\n            value: 100,\r\n            label: langPack.table.timeModified\r\n        }\r\n    ];\r\n    return (\r\n        <div style={{ marginBottom: '7px', display: 'flex', flexDirection: 'row' }}>\r\n            <Tooltip title={langPack.form.buyerId} key=\"buyerId\">\r\n                <TextField\r\n                    margin=\"normal\"\r\n                    id={buyerId}\r\n                    variant=\"outlined\"\r\n                    sx={{ margin: '0px' }}\r\n                    label={\r\n                        <Typography variant=\"h3\" sx={{ color: 'rgb(133, 133, 133)', fontWeight: 'normal' }}>\r\n                            {langPack.form.buyerId}\r\n                        </Typography>\r\n                    }\r\n                    defaultValue={buyerId}\r\n                    onBlur={(e) => setBuyerId(e.target.value)}\r\n                />\r\n            </Tooltip>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns} locale={localeMap[locale]}>\r\n                <DesktopDatePicker\r\n                    label={langPack.form.startDate}\r\n                    mask={maskMap[locale]}\r\n                    value={startDate}\r\n                    onChange={(value) => setDate(value, 'startDate')}\r\n                    renderInput={(params) => (\r\n                        <Tooltip title={langPack.form.dateConversion}>\r\n                            <TextField {...params} />\r\n                        </Tooltip>\r\n                    )}\r\n                />\r\n                <DesktopDatePicker\r\n                    label={langPack.form.endDate}\r\n                    mask={maskMap[locale]}\r\n                    value={endDate}\r\n                    onChange={(value) => setDate(value, 'endDate')}\r\n                    renderInput={(params) => (\r\n                        <Tooltip title={langPack.form.dateConversion}>\r\n                            <TextField {...params} />\r\n                        </Tooltip>\r\n                    )}\r\n                />\r\n            </LocalizationProvider>\r\n            <Box sx={{ marginLeft: '50px', marginRight: '50px', width: 100 }}>\r\n                <Slider\r\n                    defaultValue={0}\r\n                    step={100}\r\n                    marks={dateMasks}\r\n                    onChangeCommitted={(e, v) => setDateType(v === 0 ? 'dateCreated' : 'dateModified')}\r\n                />\r\n            </Box>\r\n            <Button onClick={() => autoQuery()} variant=\"outlined\">\r\n                {langPack.form.query}\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nApp.propTypes = {\r\n    localization: PropTypes.object,\r\n    langPack: PropTypes.object,\r\n    startDate: PropTypes.object,\r\n    endDate: PropTypes.object,\r\n    setDate: PropTypes.func,\r\n    setDateType: PropTypes.func,\r\n    autoQuery: PropTypes.func,\r\n    buyerId: PropTypes.string,\r\n    setBuyerId: PropTypes.func\r\n};\r\n\r\nexport default App;\r\n","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\n// material-ui\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport { Languages } from './Languages';\nimport OrderTable from './component/OrderTable';\nimport OrderFilter from './component/OrderFilter';\n\n// ==============================|| SINGLE PAGE APPLICATION ||============================== //\n\nlet fundArr = []; //资金信息，暂存\nconst App = () => {\n    console.log('order app running');\n    let navigate = useNavigate(); //react-router-dom\n    const browserLocale = /zh/i.test(navigator.language) ? 'zhCN' : 'enUS';\n    const globalization = useSelector((state) => state.globalization);\n    const [loginData] = useState(globalization.baseData.loginData);\n    const localization = useSelector((state) => state.localization); //read only (language related)\n    let [langPack, setLangPack] = useState(Languages[localization.locale]); //currentLanguage\n\n    let [page, setPage] = useState(0);\n    let [page_size, setPage_size] = useState(10);\n    let [total, setTotal] = useState(0);\n\n    //data grid 相关\n    let [tableColumns, setTableColumns] = useState([]);\n    let [tableRows, setTableRows] = useState([]);\n    let [columnVisibilityModel, setColumnVisibilityModel] = useState({});\n    const [fundAutoQuery, setFundAutoQuery] = useState(false);\n\n    //filter 相关\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n    const [dateType, setDateType] = useState('dateCreated');\n    const [buyerId, setBuyerId] = useState('');\n\n    const setDate = (value, name) => {\n        const dateCheck = (dateEarly, dateLate) => {\n            if (dateEarly.valueOf() >= dateLate.valueOf()) return queryResult(false, 'date error');\n            return true;\n        };\n        if (startDate == null || endDate == null) {\n            if (name === 'startDate') {\n                setStartDate(value);\n            } else if (name === 'endDate') {\n                setEndDate(value);\n            }\n        } else {\n            if (name === 'startDate') {\n                if (dateCheck(value, endDate)) setStartDate(value);\n            } else if (name === 'endDate') {\n                if (dateCheck(startDate, value)) setEndDate(value);\n            }\n        }\n        return;\n    };\n\n    useEffect(() => {\n        setLangPack(Languages[localization.locale || browserLocale]);\n        return () => {};\n    }, [localization.locale]); //订阅语言变化\n\n    useEffect(() => {\n        if (startDate || endDate) {\n            autoQuery();\n        }\n        return () => {};\n    }, [startDate, endDate, dateType]); //订阅语言变化\n\n    useEffect(() => {\n        if (tableRows.length && fundAutoQuery) {\n            queryFund();\n        } else {\n            tableFormatter();\n        }\n        return () => {};\n    }, [tableRows, fundAutoQuery]); //订阅表格变化\n\n    useEffect(() => {\n        console.log('I am at order');\n        if (!loginData) return navigate('/');\n        autoQuery();\n        tableFormatter();\n        return () => {\n            console.log('I leave order');\n        };\n    }, []);\n\n    //____________一些函数_______________________________________________\n\n    const queryDateConvert = (value) => {\n        let PT_GMT_HOUR_GAP = new Date().isPDT() ? -7 : -8; //太平洋时间与格林威治时间的时差\n        let timeDifference = PT_GMT_HOUR_GAP * 60 * 60 * 1000;\n        let localTimeZero = new Date(new Date(value).Format('yyyy-MM-dd 00:00:00')).valueOf();\n        let gmtZero = localTimeZero + new Date().getTimezoneOffset() * 60 * 1000; //GMT 00:00:00\n        let ptZero = gmtZero + timeDifference; //PT 00:00:00\n        return ptZero; //[Number]\n    }; //当地时间0点 👉 太平洋时间0点\n\n    function autoQuery(obj) {\n        let paramObj = {\n            role: 'seller',\n            start_page: page,\n            page_size: page_size\n        };\n        if (startDate || endDate) {\n            if (dateType === 'dateCreated') {\n                if (startDate) {\n                    paramObj.create_date_start = {\n                        time: queryDateConvert(startDate)\n                    };\n                }\n                if (endDate) {\n                    paramObj.create_date_end = {\n                        time: queryDateConvert(endDate)\n                    };\n                }\n            } else if (dateType === 'dateModified') {\n                if (startDate) {\n                    paramObj.modified_date_start = {\n                        time: queryDateConvert(startDate)\n                    };\n                }\n                if (endDate) {\n                    paramObj.modified_date_end = {\n                        time: queryDateConvert(endDate)\n                    };\n                }\n            }\n        }\n        if (buyerId) paramObj.other_login_id = buyerId;\n        if (obj) Object.assign(paramObj, obj);\n        return queryOrder({\n            param_trade_ecology_order_list_query: JSON.stringify(paramObj)\n        });\n    }\n\n    async function queryOrder(obj) {\n        let paramObj = ma.sellerOrderQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, msg.response.result);\n        let res = ma.sellerOrderCheck(msg);\n        let { status, result } = res.response;\n        console.log(result);\n        if (!status) {\n            setTotal(0);\n            setTableRows([]);\n            if (status === 0) return queryResult(false, langPack.form.orderError);\n            return queryResult(status, result);\n        }\n        let { order_list, total_count } = result;\n        setTotal(total_count);\n        let row = order_list.trade_ecology_order.map((obj) => {\n            return {\n                ...obj,\n                id: obj.trade_id\n            };\n        });\n        return setTableRows(row);\n    }\n\n    async function queryFund() {\n        if (!tableRows.length) return;\n        fundArr = [];\n        fundArr.realLength = 0;\n        tableRows.forEach((obj) => {\n            console.log('checking funds');\n            let { trade_id } = obj;\n            queryOrderFund({ e_trade_id: trade_id });\n        });\n        return;\n    } //订单资金`批量查询\n\n    async function queryOrderFund(obj) {\n        let paramObj = ma.sellerOrderFundQuery(obj);\n        let msg = await fetchAPI(paramObj);\n        if (!msg.response.status) return queryResult(false, msg.response.result);\n        let res = ma.sellerOrderFundCheck(msg);\n        let { status, result } = res.response;\n        let { e_trade_id } = res.request.data;\n        let index = tableRows.findIndex((obj) => obj.trade_id === e_trade_id);\n        if (index === -1) {\n            fundArr = [];\n            return;\n        } //没有找到对应的订单，可能刷新了\n        if (!status) {\n            fundArr[index] = {};\n            queryResult(false, langPack.form.orderFundError);\n        } else fundArr[index] = result;\n        fundArr.realLength++;\n        if (fundArr.realLength !== tableRows.length) return; //还未集齐\n        fundArr = fundArr.map((obj) => {\n            let { service_fee, fund_pay_list } = obj;\n            if (service_fee) {\n                let { amount, currency } = service_fee;\n                obj.serviceAmount = amount;\n                obj.serviceCurrency = currency;\n            }\n            if (fund_pay_list) {\n                let { pay_amount, pay_time, receive_time, should_pay_amount, receive_amount } = fund_pay_list.fund_pay[0];\n                Object.assign(obj, fund_pay_list.fund_pay[0]);\n                if (should_pay_amount) {\n                    obj.shouldPayCurrency = should_pay_amount.currency;\n                    obj.shouldPayAmount = should_pay_amount.amount;\n                }\n                if (pay_amount) {\n                    obj.payCurrency = pay_amount.currency;\n                    obj.payAmount = pay_amount.amount;\n                }\n                if (receive_amount) {\n                    obj.receiveCurrency = receive_amount.currency;\n                    obj.receiveAmount = receive_amount.amount;\n                }\n                if (pay_time) {\n                    obj.payTime = pay_time.timestamp;\n                }\n                if (receive_time) {\n                    obj.receiveTime = receive_time.timestamp;\n                }\n            }\n            return obj;\n        });\n        setTableRows((prev) => {\n            let newArr = [];\n            for (let i = 0; i < prev.length; i++) {\n                newArr.push({ ...prev[i], ...fundArr[i] });\n            }\n            console.log(newArr);\n            return newArr;\n        });\n        fundArr = [];\n        tableFormatter({ fund: true });\n    } //订单资金查询\n\n    //____________ ProductTable functions ___________________________________________________\n    function tableFormatter(obj) {\n        const columns = [\n            {\n                field: 'trade_id',\n                headerName: langPack.table.tableHeader,\n                flex: 1\n            },\n            {\n                field: 'timeOrderCreated',\n                flex: 1,\n                valueGetter: ({ row }) => row,\n                valueFormatter: ({ value }) => new Date(value.timeOrderCreated).Format('yyyy-MM-dd hh:mm'),\n                headerName: langPack.table.timeCreated\n            },\n            {\n                field: 'timeOrderModified',\n                flex: 1,\n                valueGetter: ({ row }) => row,\n                valueFormatter: ({ value }) => new Date(value.timeOrderModified).Format('yyyy-MM-dd hh:mm'),\n                headerName: langPack.table.timeModified\n            }\n        ];\n        if (obj) {\n            let { fund } = obj;\n            if (fund) {\n                columns.push(\n                    {\n                        field: 'pay_status',\n                        headerName: langPack.table.pay_status,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'receiveAmount',\n                        headerName: langPack.table.receiveAmount,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'payAmount',\n                        headerName: langPack.table.payAmount,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'shouldPayAmount',\n                        headerName: langPack.table.shouldPayAmount,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'pay_step',\n                        headerName: langPack.table.pay_step,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'pay_method',\n                        headerName: langPack.table.pay_method,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'serviceAmount',\n                        headerName: langPack.table.serviceAmount,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'shouldPayCurrency',\n                        headerName: langPack.table.currency,\n                        flex: 0.5,\n                        sortable: true\n                    },\n                    {\n                        field: 'receiveTime',\n                        valueGetter: ({ row }) => row,\n                        valueFormatter: ({ value }) => (value.receiveTime ? new Date(value.receiveTime).Format('yyyy-MM-dd hh:mm') : ''),\n                        headerName: langPack.table.receiveTime,\n                        flex: 1,\n                        sortable: true\n                    },\n                    {\n                        field: 'payTime',\n                        valueGetter: ({ row }) => row,\n                        valueFormatter: ({ value }) => (value.payTime ? new Date(value.payTime).Format('yyyy-MM-dd hh:mm') : ''),\n                        headerName: langPack.table.payTime,\n                        flex: 1,\n                        sortable: true\n                    }\n                ); // insert\n            }\n        }\n        setTableColumns(columns);\n        setColumnVisibilityModel({\n            pay_step: false, //支付步骤，大多重复\n            pay_method: false //支付方式，能付就行\n        });\n    }\n\n    const handleChangePage = (newPage) => {\n        setPage(newPage);\n        tableFormatter();\n        autoQuery({ start_page: newPage });\n    }; //翻页\n    const handleChangeRowsPerPage = (newSize) => {\n        setPage_size(newSize);\n        tableFormatter();\n        autoQuery({ page_size: newSize });\n    }; //页面大小调整\n    const onRowClick = (obj, e) => {\n        // let { id, row } = obj;\n    }; //单元格点击\n\n    //____________JSX 函数_______________________________________________\n\n    return (\n        <MainCard title=\"Order --订单\">\n            <OrderFilter\n                localization={localization}\n                langPack={langPack}\n                startDate={startDate}\n                endDate={endDate}\n                setDate={setDate}\n                setDateType={setDateType}\n                autoQuery={autoQuery}\n                buyerId={buyerId}\n                setBuyerId={setBuyerId}\n            />\n            <OrderTable\n                tableRows={tableRows}\n                tableColumns={tableColumns}\n                page_size={page_size}\n                page={page}\n                total={total}\n                localization={localization}\n                langPack={langPack}\n                columnVisibilityModel={columnVisibilityModel}\n                setColumnVisibilityModel={setColumnVisibilityModel}\n                handleChangePage={handleChangePage}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n                fundAutoQuery={fundAutoQuery}\n                setFundAutoQuery={setFundAutoQuery}\n                onRowClick={onRowClick}\n            />\n        </MainCard>\n    );\n};\n\nexport default App;\n"],"sourceRoot":""}